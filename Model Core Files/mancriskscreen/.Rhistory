drug_costs <- drug_costs + prop_drug_admin * cost_drug[risk_data$starting_menses_status]
}else{
#Determine when the cancer would be clinically diagnosed
ca_incidence_i <- cmp_incidence_function(risk_data)
}
ca_incidence_age <- ca_incidence_i[1]
#Determine size at clinical detection age
CD_size <- ca_incidence_i[4]#tumour diameter at CD
#The detection age is either the age at clinical detection
#or a formula is applied to determine the age at screen
#detection
CD_age <- ca_incidence_i[1]
cancer_diagnostic[8]<-CD_age
#Calculate tumour genesis age
t_gen <- ((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(CD_size/2)^3))^0.25-1))/(0.25*grow_rate_i)) #Calculate time to get to clinical detection size
gen_age <- CD_age - t_gen
# #If cancer occurs after age of death, re-draw age of death
if(Mort_age <= CD_age){Mort_age <-qweibull(
p = dqrunif(n = 1,min = pweibull(
q = CD_age,shape = acmmortality_wb_a,scale = acmmortality_wb_b),max = 1),
shape = acmmortality_wb_a, scale = acmmortality_wb_b)}
if(Mort_age >= time_horizon){Mort_age <- 99.99}
if(CD_age>=Mort_age){CD_age<-(Mort_age-0.01)}
cancer_diagnostic[7] <- c(Mort_age)
Time_to_screen <- screen_times[1] - age #Select the current next screen age and subtract age
Time_to_death <- Mort_age - age #Time to death from current age
Time_to_CD <- CD_age - age  #Time to clinical detection
#Triple While loop condition check if absorbing death, screen_detected or
#interval ca event has occurred. Update age at the end of each iteration
while ((age < Mort_age) && (interval_ca == 0) && (screen_detected_ca == 0)){
#Events pre-diagnosis
Event_list <- c(Time_to_screen,Time_to_death,Time_to_CD)
Event_place <- which.min(Event_list) #Pick the nearest event in time
Next_event_time <- Event_list[Event_place] #The time to nearest event
#Calculate current discount rate
current_discount<-(1/((1+discount_cost)^((Next_event_time+age-screen_startage))))
#Open screening event
if(Event_place == 1){
#Woman attends screen
screen_count<-screen_count+1
#Add cost of a mammography and risk prediction if first screen for relevant strategies
costs<-costs+(cost_screen*current_discount)
if(screen_count==1 & screen_strategy<3 & risk_data$risk_predicted==1 |
screen_count==1 & screen_strategy==7 & risk_data$risk_predicted==1 |
screen_count==1 & screen_strategy==8 & risk_data$risk_predicted==1 |
screen_count==1 & screen_strategy==9 & risk_data$risk_predicted==1){costs<-costs+(cost_strat*current_discount)}
if(screen_count == length(screen_times)){lastscreen_count <- 1}
#Add costs of supplemental screening if relevant
#if(risk_data$US_screen == 1){US_count <- US_count + 1
#costs <- costs + (cost_US*current_discount)
#US_costs<-US_costs+(cost_US*current_discount)}
#if(risk_data$MRI_screen == 1){MRI_count <- MRI_count + 1
#costs <- costs + (cost_MRI*current_discount)
#MRI_costs <- MRI_costs + (cost_MRI*current_discount)}
#Determine if tumour is present at screen
t <- (age+Next_event_time) - gen_age
if (t>0){
#Determine size of tumour
Ca_size <- Vm/(1+((Vm/Vc)^0.25-1)*exp(-0.25*grow_rate_i*t))^4 #tumour volume at time t
Ca_size <- 2*(Ca_size/(4/3*pi))^(1/3)
#Determine if screening detects the cancer
screen_result <- cmp_screening_result(Ca_size,VDG=risk_data$VDG,MRI_screening = risk_data$MRI_screen,US_screening=risk_data$US_screen)
#If a cancer is detected add a cancer and details to the counters
if(screen_result[1] == 1){
screen_detected_ca <-1
cancer_diagnostic[1] <- c((age+Time_to_screen))
cancer_diagnostic[3:6] <- c(Ca_size,
1,
screen_result[4],
screen_result[3])
cancer_diagnostic[10] <- c(screen_count)
incidence_age_record = age+Time_to_screen
#Add cost of diagnostic follow up
costs = costs + (cost_follow_up*current_discount)
costs_follow_up = costs_follow_up + (cost_follow_up*current_discount)
}
if(screen_result[1] == 1 && screen_count == 1){sdfirst_cancer <-1} #ca detected in first screen
if(screen_result[1] == 1 && screen_count == length(screen_times)){sdlast_cancer <-1} #ca detected on last screen
} else{screen_detected_ca <- 0}
#If a cancer is not found does a false-positive occur?
if(Event_place == 1 && screen_detected_ca == 0 && dqrunif(1,0,1)<recall_rate){
recall_count <- recall_count+1
#Add costs of false-positive recall
costs=costs+(cost_follow_up*current_discount)+(biopsy_rate*cost_biop*current_discount)
costs_follow_up=costs_follow_up+(costs_follow_up*current_discount)+(biopsy_rate*cost_biop*current_discount)}
} #End screening event
#Clinical cancer diagnosis event
if(Event_place == 3){
interval_ca <-1
incidence_age_record = age+Time_to_CD
#Add costs of diagnosis for clinical diagnosis
costs <- costs + (cost_follow_up*current_discount)
cancer_diagnostic[1] <- c((age+Time_to_CD))
cancer_diagnostic[3] <- c(CD_size)
}
#If a cancer detected clinically or by screening
if(screen_detected_ca == 1 || interval_ca == 1){
age <- age + Next_event_time
if(interval_ca == 1){Ca_size <- CD_size}
#Assign a stage based on tumour size
stage_cat <- cmp_stage_by_size(Ca_size)
#Add the cost of DCIS
if(stage_cat == 5){
costs = costs + (cost_DCIS*current_discount)}
#Generate a cancer specific survival time, accounting for competing risks
Ca_mort_age <- cmp_ca_survival_time(stage_cat,Mort_age,age,CD_age)
#Set up variables to look up treatment costs
if(stage_cat<3){iStage<-"Early"} else {iStage<-"Late"}
if(age<65){iAge<-"18.64"} else {iAge<-"65plus"}
#If deterministic analysis then look up a treatment cost for the cancer
if(PSA==0){
if(stage_cat <5){costs<-costs+(as.numeric(fnLookupBase(iStage,iAge,min(c(round(Ca_mort_age-age),9))))*current_discount)}
} else {
#If PSA analysis then look up treatment cost and apply cost variation
if(stage_cat <5){costs<-costs+((1+risk_data$PSA_costvar)*as.numeric(fnLookupBase(iStage,iAge,min(c(round(Ca_mort_age-age),9))))*current_discount)}
}
#Record age of death and stage of cancer
cancer_diagnostic[9] <- min(c(Ca_mort_age), c(Mort_age))
cancer_diagnostic[2] <- c(stage_cat)
}else{age <- age + Next_event_time #Update age if no cancer
}
#Update times for next event
if(screen_count+missed_screen < length(screen_times)){Time_to_screen <- screen_times[screen_count+1] - age}else{Time_to_screen <- 101} #when screen times runs out set time to age 101
Time_to_death <- Mort_age - age
Time_to_CD <- CD_age - age
} #End first while loop
if((screen_detected_ca+interval_ca) == 0){cancer_diagnostic[1] <- Mort_age} # Recorded age is age of death or cancer incidence
#Update Life-year counter
LY_counter <- Ca_mort_age-start_age
#Record total QALYs for J loop
QALY_counter <- sum(cmp_QALY_counter(Mort_age=Ca_mort_age,
incidence_age_record,
stage_cat),na.rm = TRUE)
if (PREVENTATIVE_DRUG & risk_data$risk_group!=0){ # Don't model impact of drug for strategies without risk stratification
# Decide if individual takes drugs and add cost if so
if (dqrunif(1,0,1) < uptake[risk_data$risk_group, risk_data$starting_menses_status]){
time_taking_drug <- min(rexp(1,
rate = persistence[risk_data$risk_group,
risk_data$starting_menses_status]),
course_length)
}
else{
time_taking_drug <- 0
}
# Calculate cost of drug course based on time taking
if (cost_in_full_courses){
prop_drug_admin <- 1.
}else{
prop_drug_admin <- time_taking_drug / course_length[starting_menses_status]
}
costs <- costs + prop_drug_admin * cost_drug[risk_data$starting_menses_status]
drug_costs <- drug_costs + prop_drug_admin * cost_drug[risk_data$starting_menses_status]
}
#If deterministic analysis then record outputs
if(PSA==0){
return(c(QALY_counter,
costs,
screen_count,
cancer_diagnostic[8],
(screen_detected_ca+interval_ca),
screen_detected_ca,
screen_strategy,
risk_data$growth_rate,
LY_counter,
cancer_diagnostic[2:3],
min(c(Ca_mort_age), c(Mort_age)),
cancer_diagnostic[10]))}else{
#If PSA then record outputs + monte carlo draws
return(as.numeric(c(QALY_counter,
costs,
screen_count,
cancer_diagnostic[8],
(screen_detected_ca+interval_ca),
screen_detected_ca,
screen_strategy,
risk_data$growth_rate,
LY_counter,
cancer_diagnostic[2:3],
min(c(Ca_mort_age), c(Mort_age)),
cancer_diagnostic[10],
c(risk_data[17:49]))))
}
}
#Create a results data.frame
results <- data.frame(results)
names(results) <- c('QALY',
'Cost',
'Screens',
"Cancer Diagnosed Age",
"Cancer",
"screen detected",
"alternative",
"Growth rate",
"Life Years",
"Stage",
"Cancer Size",
"Death Age",
"Cancer Screen Number")
#If PSA add additional columns for Monte Carlo draws
if(PSA==1){
names(results)[14:46]<-c("PSA_gamma_survival_1","PSA_gamma_survival_2","PSA_gamma_survival_3",
"PSA_meta_survival_54","PSA_meta_survival_74","PSA_meta_survival_99",
"PSA_beta_1","PSA_beta_2",'PSA_VDG1_sen','PSA_VDG2_sen',
'PSA_VDG3_sen', 'PSA_VDG4_sen',"PSA_MRI_cdr","PSA_US_cdr",
"PSA_log_norm_mean","PSA_log_norm_sd","PSA_eff_ana","PSA_eff_tam",
"PSA_dropout_ana","PSA_dropout_tam","PSA_uptake_1","PSA_uptake_2",
"PSA_cost_strat","PSA_costvar",
"PSA_util_1to3","PSA_util_4","PSA_costscreen","PSA_cost_follow_up",
"PSA_cost_biop","PSA_cost_US","PSA_cost_MRI","PSA_cost_drug","mcid")
}
#Save results from this chunk as an Rdata file
if(PSA==0){
save(results,file = paste(det_output_path,
"Determ_",
screen_strategy,
"_",
ii,
".Rdata",
sep = ""))}else{
save(results,file = paste(psa_output_path, "PSA_",
screen_strategy,
"_",
ii,
".Rdata",
sep = ""))
}
#Print simulation progress
print(paste(100*ii/chunks,"%"))
time.now <- Sys.time()
elapsed <- as.numeric(difftime(time.now, start_time, units = "secs"))
cat("Chunk", ii, "took", elapsed, "seconds.\n")
} #End i loop
negsamplefn(screen_strategy,MISCLASS,PSA)
#Create summarised results
merged_result <- matrix(0,nrow = chunks,ncol = 7)
if(PSA==0){
for (i in 1:chunks){
#Record average outputs for each chunk and save in an excel file
load(paste(det_output_path,
"Determ_",
screen_strategy,
"_",
i,
".Rdata",
sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
merged_result[i,1] <- mean(results[,1])
merged_result[i,2] <- mean(results[,2])
merged_result[i,3] <- mean(results[,3])
merged_result[i,4] <- mean(results[,5])
merged_result[i,5] <- mean(results[,6])
merged_result[i,6] <- mean(results[,7])
merged_result[i,7] <- mean(results[,9])
}
write.csv(merged_result,file = paste("Analysis/Summary results_",
"Detresults_strat_",
screen_strategy,
".csv",
sep=""))}else{
for (i in 1:chunks){
#Record average outputs for each chunk and save in an excel file
load(paste(psa_output_path, "PSA_",
screen_strategy,
"_",
i,
".Rdata",
sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
merged_result[i,1] <- mean(results[,1])
merged_result[i,2] <- mean(results[,2])
merged_result[i,3] <- mean(results[,3])
merged_result[i,4] <- mean(results[,5])
merged_result[i,5] <- mean(results[,6])
merged_result[i,6] <- mean(results[,7])
merged_result[i,7] <- mean(results[,9])
}
write.csv(merged_result,file = paste("Analysis/Summary results_",
"PSAresults_strat_",
screen_strategy,
".csv",
sep=""))
}
toc()
}
library("parallel")
library("mgcv")
library("tidyverse")
alternatives<-c(0,1,2,3,4,9)
filenames<-list.files("PSA results/misclassification",full.names = TRUE)
alldata<-lapply(filenames,function(x){get(load(x,.GlobalEnv))})
alldata<-do.call("rbind",alldata)
psaresults<-alldata
#Replace alternative name with string
psaresults$alternative[psaresults$alternative==0]<-"No Screening"
psaresults$alternative[psaresults$alternative==1]<-"Risk-1"
psaresults$alternative[psaresults$alternative==2]<-"Risk-2"
psaresults$alternative[psaresults$alternative==3]<-"3 yearly"
psaresults$alternative[psaresults$alternative==4]<-"2 yearly"
psaresults$alternative[psaresults$alternative==9]<-"Risk-3"
psaresults$alternative<-as.factor(psaresults$alternative)
#Slim down psaresults and garbage clean to save space
psaresults<-psaresults[-c(3,4,5,6,8,9,10,11,12,13)]
rm(results,alldata)
gc()
#Save combined psaresults as backup
save(psaresults,file = paste("PSA results/PSA_","psaresults",".Rdata",sep = ""))
erm(list=ls())
rm(list=ls())
library("parallel")
library("mgcv")
library("tidyverse")
alternatives<-c(0,1,2,3,4,9)
filenames<-list.files("PSA results/misclassification",full.names = TRUE)
alldata<-lapply(filenames,function(x){get(load(x,.GlobalEnv))})
alldata<-do.call("rbind",alldata)
psaresults<-alldata
#Replace alternative name with string
psaresults$alternative[psaresults$alternative==0]<-"No Screening"
psaresults$alternative[psaresults$alternative==1]<-"Risk-1"
psaresults$alternative[psaresults$alternative==2]<-"Risk-2"
psaresults$alternative[psaresults$alternative==3]<-"3 yearly"
psaresults$alternative[psaresults$alternative==4]<-"2 yearly"
psaresults$alternative[psaresults$alternative==9]<-"Risk-3"
psaresults$alternative<-as.factor(psaresults$alternative)
rm(results,alldata)
gc()
psaresults<-psaresults %>% filter(psaresults$Cancer==1)
modQ <- bam(data = psaresults,
discrete=TRUE,
formula = QALY ~
s(PSA_util_1to3, by = alternative, bs = "cr") +
s(PSA_util_4, by = alternative, bs = "cr") +
s(PSA_gamma_survival_1, by = alternative, bs = "cr") +
s(PSA_gamma_survival_2, by = alternative, bs = "cr") +
s(PSA_gamma_survival_3, by = alternative, bs = "cr") +
s(PSA_meta_survival_54, by = alternative, bs = "cr") +
s(PSA_meta_survival_74, by = alternative, bs = "cr") +
s(PSA_meta_survival_99, by = alternative, bs = "cr") +
s(PSA_beta_1, by = alternative, bs = "cr") +
s(PSA_beta_2, by = alternative, bs = "cr") +
s(PSA_VDG1_sen, by = alternative, bs = "cr") +
s(PSA_VDG2_sen, by = alternative, bs = "cr") +
s(PSA_VDG3_sen, by = alternative, bs = "cr") +
s(PSA_VDG4_sen, by = alternative, bs = "cr") +
s(PSA_log_norm_mean, by = alternative, bs = "cr") +
s(PSA_log_norm_sd, by = alternative, bs = "cr") +
alternative)
summary(modQ)
saveRDS(modQ,file="GAM models/QALYmodelcan.RDS")
rm(modQ)
gc()
modC <- bam(data = psaresults,
discrete=TRUE,
formula = Cost ~
s(PSA_cost_strat, by = alternative, bs = "cr") +
s(PSA_costvar, by = alternative, bs = "cr") +
s(PSA_gamma_survival_1, by = alternative, bs = "cr") +
s(PSA_gamma_survival_2, by = alternative, bs = "cr") +
s(PSA_gamma_survival_3, by = alternative, bs = "cr") +
s(PSA_meta_survival_54, by = alternative, bs = "cr") +
s(PSA_meta_survival_74, by = alternative, bs = "cr") +
s(PSA_meta_survival_99, by = alternative, bs = "cr") +
s(PSA_beta_1, by = alternative, bs = "cr") +
s(PSA_beta_2, by = alternative, bs = "cr") +
s(PSA_VDG1_sen, by = alternative, bs = "cr") +
s(PSA_VDG2_sen, by = alternative, bs = "cr") +
s(PSA_VDG3_sen, by = alternative, bs = "cr") +
s(PSA_VDG4_sen, by = alternative, bs = "cr") +
s(PSA_log_norm_mean, by = alternative, bs = "cr") +
s(PSA_log_norm_sd, by = alternative, bs = "cr") +
s(PSA_cost_follow_up, by = alternative, bs = "cr") +
s(PSA_cost_biop, by = alternative, bs = "cr") +
s(PSA_costscreen, by = alternative, bs = "cr") +
alternative)
summary(modC)
saveRDS(modC,file="GAM models/costmodelcan.RDS")
filenames<-list.files("PSA results/misclassification",full.names = TRUE)
alldata<-lapply(filenames,function(x){get(load(x,.GlobalEnv))})
alldata<-do.call("rbind",alldata)
mean(alldata$cancer)
mean(alldata$Cancer)
rm(list=ls())
library("mgcv")
library("dampack")
library(gt)
library(tidyverse)
library(magrittr)
library("MASS")
library("patchwork")
#Set number of PSA runs to estimate over
mcruns<-100000
#Set alternatives
alternative<-c(0,1,2,3,4,9)
#Set wtp thresholds to estimate over
wtp<-seq(from=0,to=100000,by=1000)
#Load GAMs
modQ<-readRDS("GAM models/QALYmodelcan.RDS")
modQ2<-readRDS("GAM models/QALYmodelnocan.RDS")
modC<-readRDS("GAM models/costmodelcan.RDS")
modC2<-readRDS("GAM models/costmodelnocan.RDS")
#Draw stage I to III survival parameters
survmvn<-data.frame(c(-5.6178,-5.2857,-6.1138),
c(-3.8083,-3.7400,-3.8704),
c(-2.7311,-2.6687,-2.7963))
survcovmat<-cov(survmvn)
survmeans<-c(survmvn[1,1],survmvn[1,2],survmvn[1,3])
PSA_gamma_survival<-mvrnorm(mcruns,survmeans,survcovmat)
# Draw Metatstatic survival parameters
metmvn<-data.frame(c(-1.78723,-1.67922,-1.89434),
c(-1.38762,-1.33512,-1.49956),
c(-1.01051,-0.93338,-1.08304))
metmat<-cov(metmvn)
metmeans<-c(metmvn[1,1],metmvn[1,2],metmvn[1,3])
PSA_meta_survival<-mvrnorm(mcruns,metmeans,metmat)
#Draw Mammography with sensitivity conditional on tumour diameter parameters W-F
PSA_beta1 <- rnorm(mcruns,1.47,0.1)
PSA_beta2 <- rnorm(mcruns,6.51,0.5)
#Draw Mammography sensitivity by volpara density grade from PREVENTICON
PSA_Sen_VDG <- data.frame(rbeta(mcruns,48,16),rbeta(mcruns,208,75),rbeta(mcruns,113,76),rbeta(mcruns,40,38))
Sen_VDG_av <- 0.757
#Draw supplemental Screening CDRs
PSA_MRI_cdr <- rbeta(mcruns,99.495,19799.5) #CDR for MRI in Mammo negative women (incremental)
PSA_US_cdr <- rbeta(mcruns,35.89,11927) #CDR for US in Mammo negative women (incremental)
#Draw tumour growth rate parameters
PSA_log_norm_mean <- rnorm(mcruns,1.07,0.09)
PSA_log_norm_sd <- rnorm(mcruns,1.31,0.11)
#Draw costs
PSA_cost_strat<-(rlnorm(mcruns,1.8826894,0.1015175))
PSA_costvar<-rnorm(mcruns,0,0.05102041)
PSA_costscreen<-rnorm(mcruns,0,0.05102041)
PSA_cost_follow_up<-rnorm(mcruns,0,0.05102041)
PSA_cost_biop<-rnorm(mcruns,0,0.05102041)
PSA_cost_US<-rnorm(mcruns,0,0.05102041)
PSA_cost_MRI<-rnorm(mcruns,0,0.05102041)
#Generate utility draws
utilmat<-data.frame(c(1-0.82,1-0.81,1-0.83),c(1-0.75,1-0.73,1-0.77))
lnutilmat<-log(utilmat)
covutil<-cov(lnutilmat)
utilmeans<-c(log(1-0.82),log(1-0.75))
PSA_util<-1-exp(mvrnorm(mcruns,utilmeans,covutil))
#Bind monte carlo draws
PSA_all_p<-cbind(PSA_gamma_survival,PSA_meta_survival,PSA_beta1,PSA_beta2,
PSA_Sen_VDG,PSA_MRI_cdr,PSA_US_cdr,PSA_log_norm_mean,
PSA_log_norm_sd,PSA_cost_strat,PSA_costvar,PSA_util,PSA_costscreen,
PSA_cost_follow_up,PSA_cost_biop,PSA_cost_US,PSA_cost_MRI)
PSA_all_p<-as.data.frame(PSA_all_p)
colnames(PSA_all_p)<-c("PSA_gamma_survival_1","PSA_gamma_survival_2","PSA_gamma_survival_3",
"PSA_meta_survival_54","PSA_meta_survival_74","PSA_meta_survival_99",
"PSA_beta_1","PSA_beta_2",'PSA_VDG1_sen','PSA_VDG2_sen',
'PSA_VDG3_sen', 'PSA_VDG4_sen',"PSA_MRI_cdr","PSA_US_cdr",
"PSA_log_norm_mean","PSA_log_norm_sd","PSA_cost_strat","PSA_costvar",
"PSA_util_1to3","PSA_util_4","PSA_costscreen","PSA_cost_follow_up",
"PSA_cost_biop","PSA_cost_US","PSA_cost_MRI")
alt_names<-c("No Screening","Risk-1","Risk-2","3 yearly","2 yearly","Risk-3")
#Create data.frames to estimate costs and QALYs
output_costscan<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_costsnocan<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_costs<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_qalyscan<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_qalysnocan<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_qalys<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
colnames(output_costscan)<-alt_names
colnames(output_costsnocan)<-alt_names
colnames(output_costs)<-alt_names
colnames(output_qalyscan)<-alt_names
colnames(output_qalysnocan)<-alt_names
colnames(output_qalys)<-alt_names
for (i in 1:length(alternative)){
PSA_all_p$alternative<-as.factor(alt_names[i])
#Predict QALYs and Costs using GAMS
output_qalyscan[,i]<-predict.bam(modQ,PSA_all_p)
output_costscan[,i]<-predict.bam(modC,PSA_all_p)
output_qalysnocan[,i]<-predict.bam(modQ2,PSA_all_p)
output_costsnocan[,i]<-predict.bam(modC2,PSA_all_p)
output_qalys[,i]<-(output_qalyscan[,i]*0.095)+(output_qalysnocan[,i]*(1-0.095))
output_costs[,i]<-(output_costscan[,i]*0.095)+(output_costsnocan[,i]*(1-0.095))
}
#Rename columns
alt_names<-c("No Screening","Risk-1","Risk-2","Three yearly","Two yearly","Risk-3")
colnames(output_costs)<-alt_names
colnames(output_qalys)<-alt_names
#Produce PSA object
psa_obj <- make_psa_obj(cost = output_costs,
effectiveness = output_qalys,
parameters = PSA_all_p,
strategies = alt_names,
currency = "£")
#Create CEAC object
ceac_obj<- ceac(wtp,psa_obj)
#Plot CEAC
plot(ceac_obj,frontier="FALSE",points="FALSE",xlab="Willingness to Pay (Thousand £ / QALY")
#Creat PSA results table and save
psa_sum <- summary(psa_obj,
calc_sds = TRUE)
psa_sum
#Set wtp thresholds to estimate over
wtp<-seq(from=0,to=50000,by=1000)
#Create CEAC object
ceac_obj<- ceac(wtp,psa_obj)
#Plot CEAC
plot(ceac_obj,frontier="FALSE",points="FALSE",xlab="Willingness to Pay (Thousand £ / QALY")
psa_sum <- summary(psa_obj,
calc_sds = TRUE)
psa_sum
write.csv(psa_sum,file="psa results summary.csv")
icers <- calculate_icers(cost = psa_sum$meanCost,
effect = psa_sum$meanEffect,
strategies = psa_sum$Strategy)
plot(icers,labels="all")
sacost<-owsa(psa_obj,outcome="cost")
#Plot CEAC
plot(ceac_obj,frontier="FALSE",points="FALSE",xlab="Willingness to Pay (Thousand £ / QALY")
