# Simplified model showing disease progression
rm(list=ls())
# HPV16 Natural History Model in R
# Simplified model showing disease progression
install.packages("reshape2")
# HPV16 Natural History Model in R
# Simplified model showing disease progression
library(ggplot2)
library(reshape2)
library(dplyr)
# Set seed for reproducibility
set.seed(42)
# Define HPV16 Natural History Model
create_hpv16_model <- function() {
# Define disease states
states <- c(
"Susceptible" = 0,
"HPV16 Infected" = 1,
"CIN1 (Low-grade lesion)" = 2,
"CIN2/3 (High-grade lesion)" = 3,
"Cervical Cancer" = 4,
"Cleared/Immune" = 5
)
# Create transition probability matrix
# Rows = from state, Columns = to state
n_states <- length(states)
transition_matrix <- matrix(0, nrow = n_states, ncol = n_states)
# Annual transition probabilities (simplified rates)
# From HPV16 Infected (state 1)
transition_matrix[2, 6] <- 0.70  # Clearance rate (70% clear within 1 year)
transition_matrix[2, 3] <- 0.20  # Progress to CIN1
transition_matrix[2, 4] <- 0.05  # Direct progression to CIN2/3
transition_matrix[2, 2] <- 0.05  # Remain infected
# From CIN1 (state 2)
transition_matrix[3, 6] <- 0.60  # Regression/clearance
transition_matrix[3, 4] <- 0.20  # Progress to CIN2/3
transition_matrix[3, 3] <- 0.20  # Remain CIN1
# From CIN2/3 (state 3)
transition_matrix[4, 6] <- 0.30  # Regression/clearance
transition_matrix[4, 5] <- 0.05  # Progress to cancer
transition_matrix[4, 4] <- 0.65  # Remain CIN2/3
# From Cancer (state 4) - terminal state
transition_matrix[5, 5] <- 1.0   # Remains in cancer state
# From Cleared/Immune (state 5)
transition_matrix[6, 6] <- 0.95  # Mostly remain immune
transition_matrix[6, 1] <- 0.05  # Small chance of becoming susceptible again
# From Susceptible (state 0)
transition_matrix[1, 1] <- 1.0   # Remain susceptible (no new infections in this simple model)
list(
states = states,
transition_matrix = transition_matrix,
state_names = names(states)
)
}
# Simulate individual disease progression
simulate_individual <- function(model, initial_state = 1, years = 10) {
states_over_time <- numeric(years + 1)
states_over_time[1] <- initial_state
current_state <- initial_state
for (year in 1:years) {
# Get transition probabilities from current state
probs <- model$transition_matrix[current_state + 1, ]
# Sample next state (states are 0-indexed, R is 1-indexed)
next_state <- sample(0:(length(model$states) - 1), size = 1, prob = probs)
current_state <- next_state
states_over_time[year + 1] <- current_state
}
return(states_over_time)
}
# Simulate cohort of individuals
simulate_cohort <- function(model, n_individuals = 1000, years = 20) {
# Initialize state count matrix
state_counts <- matrix(0, nrow = years + 1, ncol = length(model$states))
colnames(state_counts) <- model$state_names
# All start as HPV16 infected (state 1)
state_counts[1, "HPV16 Infected"] <- n_individuals
# Store all trajectories
all_trajectories <- list()
# Simulate each individual
for (i in 1:n_individuals) {
trajectory <- simulate_individual(model, initial_state = 1, years = years)
all_trajectories[[i]] <- trajectory
# Count states at each time point
for (t in 1:(years + 1)) {
state_name <- model$state_names[trajectory[t] + 1]
state_counts[t, state_name] <- state_counts[t, state_name] + 1
}
}
# Convert counts to proportions
proportions <- state_counts / n_individuals
list(
proportions = proportions,
trajectories = all_trajectories,
counts = state_counts
)
}
# Plot natural history progression
plot_natural_history <- function(proportions, model) {
# Prepare data for plotting
years <- 0:(nrow(proportions) - 1)
plot_data <- data.frame(
Year = rep(years, ncol(proportions)),
State = rep(colnames(proportions), each = length(years)),
Proportion = as.vector(proportions)
)
# Create the plot
p <- ggplot(plot_data, aes(x = Year, y = Proportion, color = State)) +
geom_line(size = 1.2) +
labs(
title = "HPV16 Natural History: Disease Progression Over Time",
x = "Years since HPV16 infection",
y = "Proportion of cohort",
color = "Disease State"
) +
theme_minimal() +
theme(
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
scale_color_manual(values = c(
"Susceptible" = "lightblue",
"HPV16 Infected" = "red",
"CIN1 (Low-grade lesion)" = "orange",
"CIN2/3 (High-grade lesion)" = "darkred",
"Cervical Cancer" = "black",
"Cleared/Immune" = "green"
)) +
guides(color = guide_legend(nrow = 2))
return(p)
}
# Print summary statistics
print_summary_stats <- function(proportions, years) {
cat("HPV16 Natural History Summary (after", years, "years):\n")
cat(paste(rep("-", 50), collapse = ""), "\n")
final_proportions <- proportions[nrow(proportions), ]
for (i in 1:length(final_proportions)) {
state_name <- names(final_proportions)[i]
prop <- final_proportions[i]
cat(sprintf("%-30s: %5.1f%%\n", state_name, prop * 100))
}
# Key outcomes
cancer_risk <- final_proportions["Cervical Cancer"]
clearance_rate <- final_proportions["Cleared/Immune"]
cat("\nKey Outcomes:\n")
cat(sprintf("Cumulative cancer risk: %.2f%%\n", cancer_risk * 100))
cat(sprintf("Clearance/immunity rate: %.1f%%\n", clearance_rate * 100))
}
# Print example trajectories
print_example_trajectories <- function(trajectories, model, n_examples = 5) {
cat("\nExample individual trajectories (first", n_examples, "women):\n")
for (i in 1:min(n_examples, length(trajectories))) {
traj <- trajectories[[i]][1:6]  # First 6 years
state_names <- model$state_names[traj + 1]
cat("Woman", i, ":", paste(state_names, collapse = " â†’ "), "\n")
}
}
# Main execution
main <- function() {
cat("Creating HPV16 natural history model...\n")
# Create model
model <- create_hpv16_model()
# Simulate cohort
cat("Simulating HPV16 natural history for 1000 women over 20 years...\n")
results <- simulate_cohort(model, n_individuals = 1000, years = 20)
# Print summary statistics
print_summary_stats(results$proportions, 20)
# Print example trajectories
print_example_trajectories(results$trajectories, model)
# Create and display plot
cat("\nGenerating plot...\n")
p <- plot_natural_history(results$proportions, model)
print(p)
# Return results for further analysis
invisible(list(
model = model,
results = results,
plot = p
))
}
# Run the simulation
simulation_results <- main()
# Additional analysis functions
analyze_time_to_outcome <- function(trajectories, target_state = 4) {
# Analyze time to reach cancer (state 4)
times_to_cancer <- numeric()
for (i in 1:length(trajectories)) {
traj <- trajectories[[i]]
cancer_time <- which(traj == target_state)[1]
if (!is.na(cancer_time)) {
times_to_cancer <- c(times_to_cancer, cancer_time - 1)  # Convert to years
}
}
if (length(times_to_cancer) > 0) {
cat("\nTime to Cancer Analysis:\n")
cat("Number who developed cancer:", length(times_to_cancer), "\n")
cat("Median time to cancer:", median(times_to_cancer), "years\n")
cat("Mean time to cancer:", round(mean(times_to_cancer), 1), "years\n")
# Plot histogram
hist(times_to_cancer,
main = "Time to Cancer Development",
xlab = "Years",
ylab = "Number of cases",
col = "lightcoral",
border = "black")
} else {
cat("\nNo cases of cancer developed in this simulation.\n")
}
}
# Run additional analysis
analyze_time_to_outcome(simulation_results$results$trajectories)
simulation_results[[1]]
simulation_results[[2]]
trace<-unlist(simulation_results$results$counts)
plot(trace)
View(trace)
View(trace)
# HPV16 Natural History Model in R
# Simplified model showing disease progression
library(ggplot2)
library(reshape2)
library(dplyr)
library(scales)  # For comma formatting in plots
# Set seed for reproducibility
set.seed(42)
# Define HPV16 Natural History Model
create_hpv16_model <- function() {
# Define disease states
states <- c(
"Susceptible" = 0,
"HPV16 Infected" = 1,
"CIN1 (Low-grade lesion)" = 2,
"CIN2/3 (High-grade lesion)" = 3,
"Cervical Cancer" = 4,
"Cleared/Immune" = 5
)
# Create transition probability matrix
# Rows = from state, Columns = to state
n_states <- length(states)
transition_matrix <- matrix(0, nrow = n_states, ncol = n_states)
# Annual transition probabilities (simplified rates)
# From HPV16 Infected (state 1)
transition_matrix[2, 6] <- 0.70  # Clearance rate (70% clear within 1 year)
transition_matrix[2, 3] <- 0.20  # Progress to CIN1
transition_matrix[2, 4] <- 0.05  # Direct progression to CIN2/3
transition_matrix[2, 2] <- 0.05  # Remain infected
# From CIN1 (state 2)
transition_matrix[3, 6] <- 0.60  # Regression/clearance
transition_matrix[3, 4] <- 0.20  # Progress to CIN2/3
transition_matrix[3, 3] <- 0.20  # Remain CIN1
# From CIN2/3 (state 3)
transition_matrix[4, 6] <- 0.30  # Regression/clearance
transition_matrix[4, 5] <- 0.05  # Progress to cancer
transition_matrix[4, 4] <- 0.65  # Remain CIN2/3
# From Cancer (state 4) - terminal state
transition_matrix[5, 5] <- 1.0   # Remains in cancer state
# From Cleared/Immune (state 5)
transition_matrix[6, 6] <- 0.95  # Mostly remain immune
transition_matrix[6, 1] <- 0.05  # Small chance of becoming susceptible again
# From Susceptible (state 0)
transition_matrix[1, 1] <- 1.0   # Remain susceptible (no new infections in this simple model)
list(
states = states,
transition_matrix = transition_matrix,
state_names = names(states)
)
}
# Simulate individual disease progression
simulate_individual <- function(model, initial_state = 1, years = 10) {
states_over_time <- numeric(years + 1)
states_over_time[1] <- initial_state
current_state <- initial_state
for (year in 1:years) {
# Get transition probabilities from current state
probs <- model$transition_matrix[current_state + 1, ]
# Sample next state (states are 0-indexed, R is 1-indexed)
next_state <- sample(0:(length(model$states) - 1), size = 1, prob = probs)
current_state <- next_state
states_over_time[year + 1] <- current_state
}
return(states_over_time)
}
# Simulate cohort of individuals
simulate_cohort <- function(model, n_individuals = 1000, years = 20) {
# Initialize state count matrix
state_counts <- matrix(0, nrow = years + 1, ncol = length(model$states))
colnames(state_counts) <- model$state_names
# All start as HPV16 infected (state 1)
state_counts[1, "HPV16 Infected"] <- n_individuals
# Store all trajectories
all_trajectories <- list()
# Simulate each individual
for (i in 1:n_individuals) {
trajectory <- simulate_individual(model, initial_state = 1, years = years)
all_trajectories[[i]] <- trajectory
# Count states at each time point
for (t in 1:(years + 1)) {
state_name <- model$state_names[trajectory[t] + 1]
state_counts[t, state_name] <- state_counts[t, state_name] + 1
}
}
# Convert counts to proportions
proportions <- state_counts / n_individuals
list(
proportions = proportions,
trajectories = all_trajectories,
counts = state_counts
)
}
# Plot natural history progression (proportions)
plot_natural_history <- function(proportions, model) {
# Prepare data for plotting
years <- 0:(nrow(proportions) - 1)
plot_data <- data.frame(
Year = rep(years, ncol(proportions)),
State = rep(colnames(proportions), each = length(years)),
Proportion = as.vector(proportions)
)
# Create the plot
p <- ggplot(plot_data, aes(x = Year, y = Proportion, color = State)) +
geom_line(size = 1.2) +
labs(
title = "HPV16 Natural History: Disease Progression Over Time (Proportions)",
x = "Years since HPV16 infection",
y = "Proportion of cohort",
color = "Disease State"
) +
theme_minimal() +
theme(
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
scale_color_manual(values = c(
"Susceptible" = "lightblue",
"HPV16 Infected" = "red",
"CIN1 (Low-grade lesion)" = "orange",
"CIN2/3 (High-grade lesion)" = "darkred",
"Cervical Cancer" = "black",
"Cleared/Immune" = "green"
)) +
guides(color = guide_legend(nrow = 2))
return(p)
}
# Plot absolute numbers in each state over time
plot_absolute_numbers <- function(counts, model) {
# Prepare data for plotting
years <- 0:(nrow(counts) - 1)
plot_data <- data.frame(
Year = rep(years, ncol(counts)),
State = rep(colnames(counts), each = length(years)),
Count = as.vector(counts)
)
# Create the plot
p <- ggplot(plot_data, aes(x = Year, y = Count, color = State)) +
geom_line(size = 1.2) +
labs(
title = "HPV16 Natural History: Absolute Numbers Over Time",
x = "Years since HPV16 infection",
y = "Number of individuals",
color = "Disease State"
) +
theme_minimal() +
theme(
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
scale_color_manual(values = c(
"Susceptible" = "lightblue",
"HPV16 Infected" = "red",
"CIN1 (Low-grade lesion)" = "orange",
"CIN2/3 (High-grade lesion)" = "darkred",
"Cervical Cancer" = "black",
"Cleared/Immune" = "green"
)) +
scale_y_continuous(labels = scales::comma) +
guides(color = guide_legend(nrow = 2))
return(p)
}
# Create stacked area plot showing absolute numbers
plot_stacked_areas <- function(counts, model) {
# Prepare data for plotting
years <- 0:(nrow(counts) - 1)
plot_data <- data.frame(
Year = rep(years, ncol(counts)),
State = rep(colnames(counts), each = length(years)),
Count = as.vector(counts)
)
# Reorder states for better visual flow
state_order <- c("Cleared/Immune", "Susceptible", "HPV16 Infected",
"CIN1 (Low-grade lesion)", "CIN2/3 (High-grade lesion)",
"Cervical Cancer")
plot_data$State <- factor(plot_data$State, levels = state_order)
# Create stacked area plot
p <- ggplot(plot_data, aes(x = Year, y = Count, fill = State)) +
geom_area(alpha = 0.8) +
labs(
title = "HPV16 Natural History: Population Distribution Over Time",
x = "Years since HPV16 infection",
y = "Number of individuals",
fill = "Disease State"
) +
theme_minimal() +
theme(
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
) +
scale_fill_manual(values = c(
"Susceptible" = "lightblue",
"HPV16 Infected" = "red",
"CIN1 (Low-grade lesion)" = "orange",
"CIN2/3 (High-grade lesion)" = "darkred",
"Cervical Cancer" = "black",
"Cleared/Immune" = "green"
)) +
scale_y_continuous(labels = scales::comma) +
guides(fill = guide_legend(nrow = 2))
return(p)
}
# Print summary statistics
print_summary_stats <- function(proportions, years) {
cat("HPV16 Natural History Summary (after", years, "years):\n")
cat(paste(rep("-", 50), collapse = ""), "\n")
final_proportions <- proportions[nrow(proportions), ]
for (i in 1:length(final_proportions)) {
state_name <- names(final_proportions)[i]
prop <- final_proportions[i]
cat(sprintf("%-30s: %5.1f%%\n", state_name, prop * 100))
}
# Key outcomes
cancer_risk <- final_proportions["Cervical Cancer"]
clearance_rate <- final_proportions["Cleared/Immune"]
cat("\nKey Outcomes:\n")
cat(sprintf("Cumulative cancer risk: %.2f%%\n", cancer_risk * 100))
cat(sprintf("Clearance/immunity rate: %.1f%%\n", clearance_rate * 100))
}
# Print example trajectories
print_example_trajectories <- function(trajectories, model, n_examples = 5) {
cat("\nExample individual trajectories (first", n_examples, "women):\n")
for (i in 1:min(n_examples, length(trajectories))) {
traj <- trajectories[[i]][1:6]  # First 6 years
state_names <- model$state_names[traj + 1]
cat("Woman", i, ":", paste(state_names, collapse = " â†’ "), "\n")
}
}
# Main execution
main <- function() {
cat("Creating HPV16 natural history model...\n")
# Create model
model <- create_hpv16_model()
# Simulate cohort
cat("Simulating HPV16 natural history for 1000 women over 20 years...\n")
results <- simulate_cohort(model, n_individuals = 1000, years = 20)
# Print summary statistics
print_summary_stats(results$proportions, 20)
# Print example trajectories
print_example_trajectories(results$trajectories, model)
# Create and display plots
cat("\nGenerating plots...\n")
# Plot 1: Proportions over time
p1 <- plot_natural_history(results$proportions, model)
print(p1)
# Plot 2: Absolute numbers over time
p2 <- plot_absolute_numbers(results$counts, model)
print(p2)
# Plot 3: Stacked area chart
p3 <- plot_stacked_areas(results$counts, model)
print(p3)
# Return results for further analysis
invisible(list(
model = model,
results = results,
plots = list(proportions = p1, numbers = p2, stacked = p3)
))
}
# Run the simulation
simulation_results <- main()
# Additional analysis functions
analyze_time_to_outcome <- function(trajectories, target_state = 4) {
# Analyze time to reach cancer (state 4)
times_to_cancer <- numeric()
for (i in 1:length(trajectories)) {
traj <- trajectories[[i]]
cancer_time <- which(traj == target_state)[1]
if (!is.na(cancer_time)) {
times_to_cancer <- c(times_to_cancer, cancer_time - 1)  # Convert to years
}
}
if (length(times_to_cancer) > 0) {
cat("\nTime to Cancer Analysis:\n")
cat("Number who developed cancer:", length(times_to_cancer), "\n")
cat("Median time to cancer:", median(times_to_cancer), "years\n")
cat("Mean time to cancer:", round(mean(times_to_cancer), 1), "years\n")
# Plot histogram
hist(times_to_cancer,
main = "Time to Cancer Development",
xlab = "Years",
ylab = "Number of cases",
col = "lightcoral",
border = "black")
} else {
cat("\nNo cases of cancer developed in this simulation.\n")
}
}
# Run additional analysis
analyze_time_to_outcome(simulation_results$results$trajectories)
