}
#Update times for next event
if(screen_count+missed_screen < length(screen_times)){Time_to_screen <- screen_times[screen_count+1] - age}else{Time_to_screen <- 101} #when screen times runs out set time to age 101
Time_to_death <- Mort_age - age
Time_to_CD <- CD_age - age
} #End first while loop
if((screen_detected_ca+interval_ca) == 0){cancer_diagnostic[1] <- Mort_age} # Recorded age is age of death or cancer incidence
#Update Life-year counter
LY_counter <- Ca_mort_age-start_age
#Record total QALYs for J loop
QALY_counter <- sum(cmp_QALY_counter(Mort_age=Ca_mort_age,
incidence_age_record,
stage_cat),na.rm = TRUE)
if (PREVENTATIVE_DRUG & risk_data$risk_group!=0){ # Don't model impact of drug for strategies without risk stratification
# Decide if individual takes drugs and add cost if so
if (dqrunif(1,0,1) < uptake[risk_data$risk_group, risk_data$starting_menses_status]){
time_taking_drug <- min(rexp(1,
rate = persistence[risk_data$risk_group,
risk_data$starting_menses_status]),
course_length)
}
else{
time_taking_drug <- 0
}
# Calculate cost of drug course based on time taking
if (cost_in_full_courses){
prop_drug_admin <- 1.
}else{
prop_drug_admin <- time_taking_drug / course_length[starting_menses_status]
}
costs <- costs + prop_drug_admin * cost_drug[risk_data$starting_menses_status]
drug_costs <- drug_costs + prop_drug_admin * cost_drug[risk_data$starting_menses_status]
}
#If deterministic analysis then record outputs
if(PSA==0){
return(c(QALY_counter,
costs,
screen_count,
cancer_diagnostic[8],
(screen_detected_ca+interval_ca),
screen_detected_ca,
screen_strategy,
risk_data$growth_rate,
LY_counter,
cancer_diagnostic[2:3],
min(c(Ca_mort_age), c(Mort_age)),
cancer_diagnostic[10]))}else{
#If PSA then record outputs + monte carlo draws
return(as.numeric(c(QALY_counter,
costs,
screen_count,
cancer_diagnostic[8],
(screen_detected_ca+interval_ca),
screen_detected_ca,
screen_strategy,
risk_data$growth_rate,
LY_counter,
cancer_diagnostic[2:3],
min(c(Ca_mort_age), c(Mort_age)),
cancer_diagnostic[10],
c(risk_data[17:49]))))
}
}
#Create a results data.frame
results <- data.frame(results)
names(results) <- c('QALY',
'Cost',
'Screens',
"Cancer Diagnosed Age",
"Cancer",
"screen detected",
"alternative",
"Growth rate",
"Life Years",
"Stage",
"Cancer Size",
"Death Age",
"Cancer Screen Number")
#If PSA add additional columns for Monte Carlo draws
if(PSA==1){
names(results)[14:46]<-c("PSA_gamma_survival_1","PSA_gamma_survival_2","PSA_gamma_survival_3",
"PSA_meta_survival_54","PSA_meta_survival_74","PSA_meta_survival_99",
"PSA_beta_1","PSA_beta_2",'PSA_VDG1_sen','PSA_VDG2_sen',
'PSA_VDG3_sen', 'PSA_VDG4_sen',"PSA_MRI_cdr","PSA_US_cdr",
"PSA_log_norm_mean","PSA_log_norm_sd","PSA_eff_ana","PSA_eff_tam",
"PSA_dropout_ana","PSA_dropout_tam","PSA_uptake_1","PSA_uptake_2",
"PSA_cost_strat","PSA_costvar",
"PSA_util_1to3","PSA_util_4","PSA_costscreen","PSA_cost_follow_up",
"PSA_cost_biop","PSA_cost_US","PSA_cost_MRI","PSA_cost_drug","mcid")
}
#Save results from this chunk as an Rdata file
if(PSA==0){
save(results,file = paste(det_output_path,
"Determ_",
screen_strategy,
"_",
ii,
".Rdata",
sep = ""))}else{
save(results,file = paste(psa_output_path, "PSA_",
screen_strategy,
"_",
ii,
".Rdata",
sep = ""))
}
#Print simulation progress
print(paste(100*ii/chunks,"%"))
time.now <- Sys.time()
elapsed <- as.numeric(difftime(time.now, start_time, units = "secs"))
cat("Chunk", ii, "took", elapsed, "seconds.\n")
} #End i loop
negsamplefn(screen_strategy,MISCLASS,PSA)
#Create summarised results
merged_result <- matrix(0,nrow = chunks,ncol = 7)
if(PSA==0){
for (i in 1:chunks){
#Record average outputs for each chunk and save in an excel file
load(paste(det_output_path,
"Determ_",
screen_strategy,
"_",
i,
".Rdata",
sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
merged_result[i,1] <- mean(results[,1])
merged_result[i,2] <- mean(results[,2])
merged_result[i,3] <- mean(results[,3])
merged_result[i,4] <- mean(results[,5])
merged_result[i,5] <- mean(results[,6])
merged_result[i,6] <- mean(results[,7])
merged_result[i,7] <- mean(results[,9])
}
write.csv(merged_result,file = paste("Analysis/Summary results_",
"Detresults_strat_",
screen_strategy,
".csv",
sep=""))}else{
for (i in 1:chunks){
#Record average outputs for each chunk and save in an excel file
load(paste(psa_output_path, "PSA_",
screen_strategy,
"_",
i,
".Rdata",
sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
merged_result[i,1] <- mean(results[,1])
merged_result[i,2] <- mean(results[,2])
merged_result[i,3] <- mean(results[,3])
merged_result[i,4] <- mean(results[,5])
merged_result[i,5] <- mean(results[,6])
merged_result[i,6] <- mean(results[,7])
merged_result[i,7] <- mean(results[,9])
}
write.csv(merged_result,file = paste("Analysis/Summary results_",
"PSAresults_strat_",
screen_strategy,
".csv",
sep=""))
}
toc()
}
library("dampack")
library(gt)
library(tidyverse)
library(magrittr)
alternatives<-c(0,1,2,3,4,9)
filenames<-list.files(det_output_path,full.names = TRUE)
alldata<-lapply(filenames,function(x){get(load(x,.GlobalEnv))})
alldata<-do.call("rbind",alldata)
#alldata<-alldata %>% filter(alldata$`Cancer Diagnosed Age`>=50 | alldata$`Cancer Diagnosed Age`==0)
output_df<-as.data.frame(matrix(nrow=6,ncol=4))
#Assign names to strategies
#Note-currently fixed to 6 strategies considered in final paper
strategies<-c("No Screening","Risk-1","Risk-2","3 Yearly","2 Yearly","Risk-3")
rownames(output_df) <- strategies
colnames(output_df)<-c("qaly","cost","screens","life years")
output_df$qaly<-alldata %>%
group_by(alternative)%>%
summarize(Mean=mean(QALY, na.rm=TRUE)) %>% dplyr::select(Mean)
output_df$qaly<-unlist(output_df$qaly)
output_df$cost<-alldata %>%
group_by(alternative)%>%
summarize(Mean=mean(Cost, na.rm=TRUE)) %>% dplyr::select(Mean)
output_df$cost<-unlist(output_df$cost)
output_df$screens<-alldata %>%
group_by(alternative)%>%
summarize(Mean=mean(Screens, na.rm=TRUE)) %>% dplyr::select(Mean)
output_df$screens<-unlist(output_df$screens)
output_df$`life years`<-alldata %>%
group_by(alternative)%>%
summarize(Mean=mean(`Life Years`, na.rm=TRUE)) %>% dplyr::select(Mean)
output_df$`life years`<-unlist(output_df$`life years`)
#Calculate Incremental Results
output_df[,"incQALYS"]<-output_df$qaly-rep(output_df$qaly[1],length=nrow(output_df))
output_df[,"incCost"]<-c(output_df$cost-output_df$cost[1])
output_df[,"ICER"]<-c(output_df$incCost/output_df$incQALYS)
output_df[,"NB20k"]<-c((output_df$incQALYS*20000)-output_df$incCost)
output_df[,"NB30k"]<-c((output_df$incQALYS*30000)-output_df$incCost)
#Plot CEP for strategies
icer_strat<-calculate_icers(cost=output_df$cost,
effect=output_df$qaly,
strategies = c(row.names(output_df)))
plot(icer_strat,currency="£", label="all")
plot(icer_strat,currency="£", label="all")
rm(list=ls())
library("mgcv")
library("dampack")
library(gt)
library(tidyverse)
library(magrittr)
library("MASS")
library("patchwork")
#Set number of PSA runs to estimate over
mcruns<-100000
#Set alternatives
alternative<-c(0,1,2,3,4,9)
#Set wtp thresholds to estimate over
wtp<-seq(from=0,to=100000,by=1000)
#Load GAMs
modQ<-readRDS("GAM models/QALYmodelslim.RDS")
#Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library("mgcv")
library("dampack")
library(gt)
library(tidyverse)
library(magrittr)
library("MASS")
library("patchwork")
#Set number of PSA runs to estimate over
mcruns<-100000
#Set alternatives
alternative<-c(0,1,2,3,4,9)
#Set wtp thresholds to estimate over
wtp<-seq(from=0,to=100000,by=1000)
#Load GAMs
modQ<-readRDS("GAM models/QALYmodelslim.RDS")
library("mgcv")
library("dampack")
library(gt)
library(tidyverse)
library(magrittr)
library("MASS")
library("patchwork")
#Set number of PSA runs to estimate over
mcruns<-1000000
#Set alternatives
alternative<-c(0,1,2,3,4,9)
#Set wtp thresholds to estimate over
wtp<-seq(from=0,to=50000,by=1000)
#Load GAMs
modQ<-readRDS("GAM models/QALYmodelcan.RDS")
modQ2<-readRDS("GAM models/QALYmodelnocan.RDS")
modC<-readRDS("GAM models/costmodelcan.RDS")
modC2<-readRDS("GAM models/costmodelnocan.RDS")
#Draw stage I to III survival parameters
survmvn<-data.frame(c(-5.6178,-5.2857,-6.1138),
c(-3.8083,-3.7400,-3.8704),
c(-2.7311,-2.6687,-2.7963))
survcovmat<-cov(survmvn)
survmeans<-c(survmvn[1,1],survmvn[1,2],survmvn[1,3])
PSA_gamma_survival<-mvrnorm(mcruns,survmeans,survcovmat)
# Draw Metatstatic survival parameters
metmvn<-data.frame(c(-1.78723,-1.67922,-1.89434),
c(-1.38762,-1.33512,-1.49956),
c(-1.01051,-0.93338,-1.08304))
metmat<-cov(metmvn)
metmeans<-c(metmvn[1,1],metmvn[1,2],metmvn[1,3])
PSA_meta_survival<-mvrnorm(mcruns,metmeans,metmat)
#Draw Mammography with sensitivity conditional on tumour diameter parameters W-F
PSA_beta1 <- rnorm(mcruns,1.47,0.1)
PSA_beta2 <- rnorm(mcruns,6.51,0.5)
#Draw Mammography sensitivity by volpara density grade from PREVENTICON
PSA_Sen_VDG <- data.frame(rbeta(mcruns,48,16),rbeta(mcruns,208,75),rbeta(mcruns,113,76),rbeta(mcruns,40,38))
Sen_VDG_av <- 0.757
#Draw supplemental Screening CDRs
PSA_MRI_cdr <- rbeta(mcruns,99.495,19799.5) #CDR for MRI in Mammo negative women (incremental)
PSA_US_cdr <- rbeta(mcruns,35.89,11927) #CDR for US in Mammo negative women (incremental)
#Draw tumour growth rate parameters
PSA_log_norm_mean <- rnorm(mcruns,1.07,0.09)
PSA_log_norm_sd <- rnorm(mcruns,1.31,0.11)
#Draw costs
PSA_cost_strat<-(rlnorm(mcruns,1.8826894,0.1015175))
PSA_costvar<-rnorm(mcruns,0,0.05102041)
PSA_costscreen<-rnorm(mcruns,0,0.05102041)
PSA_cost_follow_up<-rnorm(mcruns,0,0.05102041)
PSA_cost_biop<-rnorm(mcruns,0,0.05102041)
PSA_cost_US<-rnorm(mcruns,0,0.05102041)
PSA_cost_MRI<-rnorm(mcruns,0,0.05102041)
#Generate utility draws
utilmat<-data.frame(c(1-0.82,1-0.81,1-0.83),c(1-0.75,1-0.73,1-0.77))
lnutilmat<-log(utilmat)
covutil<-cov(lnutilmat)
utilmeans<-c(log(1-0.82),log(1-0.75))
PSA_util<-1-exp(mvrnorm(mcruns,utilmeans,covutil))
#Bind monte carlo draws
PSA_all_p<-cbind(PSA_gamma_survival,PSA_meta_survival,PSA_beta1,PSA_beta2,
PSA_Sen_VDG,PSA_MRI_cdr,PSA_US_cdr,PSA_log_norm_mean,
PSA_log_norm_sd,PSA_cost_strat,PSA_costvar,PSA_util,PSA_costscreen,
PSA_cost_follow_up,PSA_cost_biop,PSA_cost_US,PSA_cost_MRI)
PSA_all_p<-as.data.frame(PSA_all_p)
colnames(PSA_all_p)<-c("PSA_gamma_survival_1","PSA_gamma_survival_2","PSA_gamma_survival_3",
"PSA_meta_survival_54","PSA_meta_survival_74","PSA_meta_survival_99",
"PSA_beta_1","PSA_beta_2",'PSA_VDG1_sen','PSA_VDG2_sen',
'PSA_VDG3_sen', 'PSA_VDG4_sen',"PSA_MRI_cdr","PSA_US_cdr",
"PSA_log_norm_mean","PSA_log_norm_sd","PSA_cost_strat","PSA_costvar",
"PSA_util_1to3","PSA_util_4","PSA_costscreen","PSA_cost_follow_up",
"PSA_cost_biop","PSA_cost_US","PSA_cost_MRI")
alt_names<-c("No Screening","Risk-1","Risk-2","3 yearly","2 yearly","Risk-3")
#Create data.frames to estimate costs and QALYs
output_costscan<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_costsnocan<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_costs<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_qalyscan<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_qalysnocan<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_qalys<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
colnames(output_costscan)<-alt_names
colnames(output_costsnocan)<-alt_names
colnames(output_costs)<-alt_names
colnames(output_qalyscan)<-alt_names
colnames(output_qalysnocan)<-alt_names
colnames(output_qalys)<-alt_names
#For each alternative
for (i in 1:length(alternative)){
PSA_all_p$alternative<-as.factor(alt_names[i])
#Predict QALYs and Costs using GAMS
output_qalyscan[,i]<-predict.bam(modQ,PSA_all_p)
output_costscan[,i]<-predict.bam(modC,PSA_all_p)
output_qalysnocan[,i]<-predict.bam(modQ2,PSA_all_p)
output_costsnocan[,i]<-predict.bam(modC2,PSA_all_p)
output_qalys[,i]<-(output_qalyscan[,i]*0.0934)+(output_qalysnocan[,i]*(1-0.0934))
output_costs[,i]<-(output_costscan[,i]*0.0934)+(output_costsnocan[,i]*(1-0.0934))
}
#Rename columns
alt_names<-c("No Screening","Risk-1","Risk-2","Three yearly","Two yearly","Risk-3")
colnames(output_costs)<-alt_names
colnames(output_qalys)<-alt_names
#Produce PSA object
psa_obj <- make_psa_obj(cost = output_costs,
effectiveness = output_qalys,
parameters = PSA_all_p,
strategies = alt_names,
currency = "£")
#Create CEAC object
ceac_obj<- ceac(wtp,psa_obj)
#Plot CEAC
plot(ceac_obj,frontier="FALSE",points="FALSE",xlab="Willingness to Pay (Thousand £ / QALY")
#Creat PSA results table and save
psa_sum <- summary(psa_obj,
calc_sds = TRUE)
psa_sum
write.csv(psa_sum,file="psa results summary.csv")
#Plot cost-effectiveness plane for PSA results
icers <- calculate_icers(cost = psa_sum$meanCost,
effect = psa_sum$meanEffect,
strategies = psa_sum$Strategy)
plot(icers,labels="all")
#One-way sensitivity analysis for costs, effectiveness and net benefit
sacost<-owsa(psa_obj,outcome="cost")
feasqalys<-output_qalys[-c(3,5)]
feascosts<-output_costs[-c(3,5)]
feas_psa_obj <- make_psa_obj(cost = feascosts,
effectiveness = feasqalys,
parameters = PSA_all_p,
strategies = alt_names[-c(3,5)],
currency = "£")
feas_ceac_obj<- ceac(wtp,feas_psa_obj)
plot(feas_ceac_obj,frontier="FALSE",points="FALSE",xlab="Willingness to Pay (Thousand £ / QALY")
rm(list=ls())
#Set number of PSA runs to estimate over
mcruns<-1000000
#Set alternatives
alternative<-c(0,1,2,3,4,9)
#Set wtp thresholds to estimate over
wtp<-seq(from=0,to=50000,by=1000)
#Load GAMs
modQ<-readRDS("GAM models/QALYmodelcan.RDS")
modQ2<-readRDS("GAM models/QALYmodelnocan.RDS")
modC<-readRDS("GAM models/costmodelcan.RDS")
modC2<-readRDS("GAM models/costmodelnocan.RDS")
#Draw stage I to III survival parameters
survmvn<-data.frame(c(-5.6178,-5.2857,-6.1138),
c(-3.8083,-3.7400,-3.8704),
c(-2.7311,-2.6687,-2.7963))
survcovmat<-cov(survmvn)
survmeans<-c(survmvn[1,1],survmvn[1,2],survmvn[1,3])
PSA_gamma_survival<-mvrnorm(mcruns,survmeans,survcovmat)
# Draw Metatstatic survival parameters
metmvn<-data.frame(c(-1.78723,-1.67922,-1.89434),
c(-1.38762,-1.33512,-1.49956),
c(-1.01051,-0.93338,-1.08304))
metmat<-cov(metmvn)
metmeans<-c(metmvn[1,1],metmvn[1,2],metmvn[1,3])
PSA_meta_survival<-mvrnorm(mcruns,metmeans,metmat)
#Draw Mammography with sensitivity conditional on tumour diameter parameters W-F
PSA_beta1 <- rnorm(mcruns,1.47,0.1)
PSA_beta2 <- rnorm(mcruns,6.51,0.5)
#Draw Mammography sensitivity by volpara density grade from PREVENTICON
PSA_Sen_VDG <- data.frame(rbeta(mcruns,48,16),rbeta(mcruns,208,75),rbeta(mcruns,113,76),rbeta(mcruns,40,38))
Sen_VDG_av <- 0.757
#Draw supplemental Screening CDRs
PSA_MRI_cdr <- rbeta(mcruns,99.495,19799.5) #CDR for MRI in Mammo negative women (incremental)
PSA_US_cdr <- rbeta(mcruns,35.89,11927) #CDR for US in Mammo negative women (incremental)
#Draw tumour growth rate parameters
PSA_log_norm_mean <- rnorm(mcruns,1.07,0.09)
PSA_log_norm_sd <- rnorm(mcruns,1.31,0.11)
#Draw costs
PSA_cost_strat<-(rlnorm(mcruns,1.8826894,0.1015175))
PSA_costvar<-rnorm(mcruns,0,0.05102041)
PSA_costscreen<-rnorm(mcruns,0,0.05102041)
PSA_cost_follow_up<-rnorm(mcruns,0,0.05102041)
PSA_cost_biop<-rnorm(mcruns,0,0.05102041)
PSA_cost_US<-rnorm(mcruns,0,0.05102041)
PSA_cost_MRI<-rnorm(mcruns,0,0.05102041)
#Generate utility draws
utilmat<-data.frame(c(1-0.82,1-0.81,1-0.83),c(1-0.75,1-0.73,1-0.77))
lnutilmat<-log(utilmat)
covutil<-cov(lnutilmat)
utilmeans<-c(log(1-0.82),log(1-0.75))
PSA_util<-1-exp(mvrnorm(mcruns,utilmeans,covutil))
#Bind monte carlo draws
PSA_all_p<-cbind(PSA_gamma_survival,PSA_meta_survival,PSA_beta1,PSA_beta2,
PSA_Sen_VDG,PSA_MRI_cdr,PSA_US_cdr,PSA_log_norm_mean,
PSA_log_norm_sd,PSA_cost_strat,PSA_costvar,PSA_util,PSA_costscreen,
PSA_cost_follow_up,PSA_cost_biop,PSA_cost_US,PSA_cost_MRI)
PSA_all_p<-as.data.frame(PSA_all_p)
colnames(PSA_all_p)<-c("PSA_gamma_survival_1","PSA_gamma_survival_2","PSA_gamma_survival_3",
"PSA_meta_survival_54","PSA_meta_survival_74","PSA_meta_survival_99",
"PSA_beta_1","PSA_beta_2",'PSA_VDG1_sen','PSA_VDG2_sen',
'PSA_VDG3_sen', 'PSA_VDG4_sen',"PSA_MRI_cdr","PSA_US_cdr",
"PSA_log_norm_mean","PSA_log_norm_sd","PSA_cost_strat","PSA_costvar",
"PSA_util_1to3","PSA_util_4","PSA_costscreen","PSA_cost_follow_up",
"PSA_cost_biop","PSA_cost_US","PSA_cost_MRI")
alt_names<-c("No Screening","Risk-1","Risk-2","3 yearly","2 yearly","Risk-3")
#Create data.frames to estimate costs and QALYs
output_costscan<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_costsnocan<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_costs<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_qalyscan<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_qalysnocan<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_qalys<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
colnames(output_costscan)<-alt_names
colnames(output_costsnocan)<-alt_names
colnames(output_costs)<-alt_names
colnames(output_qalyscan)<-alt_names
colnames(output_qalysnocan)<-alt_names
colnames(output_qalys)<-alt_names
#For each alternative
for (i in 1:length(alternative)){
PSA_all_p$alternative<-as.factor(alt_names[i])
#Predict QALYs and Costs using GAMS
output_qalyscan[,i]<-predict.bam(modQ,PSA_all_p)
output_costscan[,i]<-predict.bam(modC,PSA_all_p)
output_qalysnocan[,i]<-predict.bam(modQ2,PSA_all_p)
output_costsnocan[,i]<-predict.bam(modC2,PSA_all_p)
output_qalys[,i]<-(output_qalyscan[,i]*0.0934)+(output_qalysnocan[,i]*(1-0.0934))
output_costs[,i]<-(output_costscan[,i]*0.0934)+(output_costsnocan[,i]*(1-0.0934))
}
#Rename columns
alt_names<-c("No Screening","Risk-1","Risk-2","Three yearly","Two yearly","Risk-3")
colnames(output_costs)<-alt_names
colnames(output_qalys)<-alt_names
#Produce PSA object
psa_obj <- make_psa_obj(cost = output_costs,
effectiveness = output_qalys,
parameters = PSA_all_p,
strategies = alt_names,
currency = "£")
#Create CEAC object
ceac_obj<- ceac(wtp,psa_obj)
#Plot CEAC
plot(ceac_obj,frontier="FALSE",points="FALSE",xlab="Willingness to Pay (Thousand £ / QALY")
#Creat PSA results table and save
psa_sum <- summary(psa_obj,
calc_sds = TRUE)
psa_sum
write.csv(psa_sum,file="psa results summary.csv")
#Plot cost-effectiveness plane for PSA results
icers <- calculate_icers(cost = psa_sum$meanCost,
effect = psa_sum$meanEffect,
strategies = psa_sum$Strategy)
plot(icers,labels="all")
#One-way sensitivity analysis for costs, effectiveness and net benefit
sacost<-owsa(psa_obj,outcome="cost")
View(psa_obj)
View(psa_obj)
psa_obj$parameters
#Produce PSA object
psa_obj <- make_psa_obj(cost = output_costs,
effectiveness = output_qalys,
parameters = PSA_all_p[1:25],
strategies = alt_names,
currency = "£")
#Create CEAC object
ceac_obj<- ceac(wtp,psa_obj)
#Plot CEAC
plot(ceac_obj,frontier="FALSE",points="FALSE",xlab="Willingness to Pay (Thousand £ / QALY")
#One-way sensitivity analysis for costs, effectiveness and net benefit
sacost<-owsa(psa_obj,outcome="cost")
owsa_tornado(sacost,return="plot")
#Plot chart of impact of changes in parameters on optimal strategy
owsa_opt_strat(sanb,return="plot",col="full",plot_const=FALSE)
sanb<-owsa(psa_obj,outcome="nmb",wtp=20000)
#Plot chart of impact of changes in parameters on optimal strategy
owsa_opt_strat(sanb,return="plot",col="full",plot_const=FALSE)
#Plot chart of impact of changes in parameters on optimal strategy
owsa_opt_strat(sanb,return="plot",col="full",plot_const=FALSE)
#Plot chart of impact of changes in parameters on optimal strategy
owsa_opt_strat(sanb,return="plot",col="full",plot_const=FALSE)
