start_size <- 0.25 #starting size of tumours, diameter in mm
Vc = (4/3)*pi*(start_size/2)^3 #Volume at start
Vm = (4/3)*pi*(max_size/2)^3 #Max volume
#Get estimates for Mean growth rate and upper and lower confidence intervals
grow_rate<-rlnorm(runif(100000,0,1),meanlog=log_norm_mean,sdlog=sqrt(log_norm_sd))
rate_centiles<-quantile(grow_rate,c(0.025,0.5,0.975))
#Estimate time taken to grow to different sizes
upperbound<-seq(from=10,to=100,b=5)
lowerbound<-seq(from=5,to=95,by=5)
#Function estimates time take to grow from one size to another
#Creates a vector where each element is a cumulative sum of the time taken to grow
#to that size
growth_time<-function(upperbound,lowerbound,grow_rate){
t<-vector(length=length(upperbound))
for (i in 1:length(upperbound)) {
t[i]<-((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(upperbound[i]/2)^3))^0.25-1))/(0.25*grow_rate)) -
((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(lowerbound[i]/2)^3))^0.25-1))/(0.25*grow_rate))}
t<-cumsum(t)
return(t)
}
#Create a data.frame of time taken to grow to different sizes for lower, mean,
#and upper estimates of the growth rate
grow_time_all<-data.frame(matrix(nrow=20,ncol=4))
colnames(grow_time_all)<-c("Size","Lower","Mean","Upper")
grow_time_all[1,]<-c(0,0,0,0)
grow_time_all$Size[2:20]<-upperbound
grow_time_all$Lower[2:20]<-growth_time(upperbound,lowerbound,grow_rate=rate_centiles[1])
grow_time_all$Mean[2:20]<-growth_time(upperbound,lowerbound,grow_rate=rate_centiles[2])
grow_time_all$Upper[2:20]<-growth_time(upperbound,lowerbound,grow_rate=rate_centiles[3])
#Plot results
plot(grow_time_all$Mean,grow_time_all$Size,
type="l",xlab="Time (Years)",ylab="Size (mm)",xlim=c(0,20))
lines(grow_time_all$Lower,grow_time_all$Size,lty=2)
lines(grow_time_all$Upper,grow_time_all$Size,lty=2)
log_norm_mean <- 1.07
log_norm_sd <- 3
max_size <- 128 #mm diameter
start_size <- 0.25 #starting size of tumours, diameter in mm
Vc = (4/3)*pi*(start_size/2)^3 #Volume at start
Vm = (4/3)*pi*(max_size/2)^3 #Max volume
#Get estimates for Mean growth rate and upper and lower confidence intervals
grow_rate<-rlnorm(runif(100000,0,1),meanlog=log_norm_mean,sdlog=sqrt(log_norm_sd))
rate_centiles<-quantile(grow_rate,c(0.025,0.5,0.975))
#Estimate time taken to grow to different sizes
upperbound<-seq(from=10,to=100,b=5)
lowerbound<-seq(from=5,to=95,by=5)
#Function estimates time take to grow from one size to another
#Creates a vector where each element is a cumulative sum of the time taken to grow
#to that size
growth_time<-function(upperbound,lowerbound,grow_rate){
t<-vector(length=length(upperbound))
for (i in 1:length(upperbound)) {
t[i]<-((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(upperbound[i]/2)^3))^0.25-1))/(0.25*grow_rate)) -
((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(lowerbound[i]/2)^3))^0.25-1))/(0.25*grow_rate))}
t<-cumsum(t)
return(t)
}
#Create a data.frame of time taken to grow to different sizes for lower, mean,
#and upper estimates of the growth rate
grow_time_all<-data.frame(matrix(nrow=20,ncol=4))
colnames(grow_time_all)<-c("Size","Lower","Mean","Upper")
grow_time_all[1,]<-c(0,0,0,0)
grow_time_all$Size[2:20]<-upperbound
grow_time_all$Lower[2:20]<-growth_time(upperbound,lowerbound,grow_rate=rate_centiles[1])
grow_time_all$Mean[2:20]<-growth_time(upperbound,lowerbound,grow_rate=rate_centiles[2])
grow_time_all$Upper[2:20]<-growth_time(upperbound,lowerbound,grow_rate=rate_centiles[3])
#Plot results
plot(grow_time_all$Mean,grow_time_all$Size,
type="l",xlab="Time (Years)",ylab="Size (mm)",xlim=c(0,20))
lines(grow_time_all$Lower,grow_time_all$Size,lty=2)
lines(grow_time_all$Upper,grow_time_all$Size,lty=2)
log_norm_mean <- 1.07
log_norm_sd <- 1.47
max_size <- 128 #mm diameter
start_size <- 0.25 #starting size of tumours, diameter in mm
Vc = (4/3)*pi*(start_size/2)^3 #Volume at start
Vm = (4/3)*pi*(max_size/2)^3 #Max volume
#Get estimates for Mean growth rate and upper and lower confidence intervals
grow_rate<-rlnorm(runif(100000,0,1),meanlog=log_norm_mean,sdlog=sqrt(log_norm_sd))
rate_centiles<-quantile(grow_rate,c(0.025,0.5,0.975))
#Estimate time taken to grow to different sizes
upperbound<-seq(from=10,to=100,b=5)
lowerbound<-seq(from=5,to=95,by=5)
#Function estimates time take to grow from one size to another
#Creates a vector where each element is a cumulative sum of the time taken to grow
#to that size
growth_time<-function(upperbound,lowerbound,grow_rate){
t<-vector(length=length(upperbound))
for (i in 1:length(upperbound)) {
t[i]<-((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(upperbound[i]/2)^3))^0.25-1))/(0.25*grow_rate)) -
((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(lowerbound[i]/2)^3))^0.25-1))/(0.25*grow_rate))}
t<-cumsum(t)
return(t)
}
#Create a data.frame of time taken to grow to different sizes for lower, mean,
#and upper estimates of the growth rate
grow_time_all<-data.frame(matrix(nrow=20,ncol=4))
colnames(grow_time_all)<-c("Size","Lower","Mean","Upper")
grow_time_all[1,]<-c(0,0,0,0)
grow_time_all$Size[2:20]<-upperbound
grow_time_all$Lower[2:20]<-growth_time(upperbound,lowerbound,grow_rate=rate_centiles[1])
grow_time_all$Mean[2:20]<-growth_time(upperbound,lowerbound,grow_rate=rate_centiles[2])
grow_time_all$Upper[2:20]<-growth_time(upperbound,lowerbound,grow_rate=rate_centiles[3])
#Plot results
plot(grow_time_all$Mean,grow_time_all$Size,
type="l",xlab="Time (Years)",ylab="Size (mm)",xlim=c(0,20))
lines(grow_time_all$Lower,grow_time_all$Size,lty=2)
lines(grow_time_all$Upper,grow_time_all$Size,lty=2)
beta1 <- 1.47 #Increases result in longer time to reach maximum sensitivity
beta2 <- 6.51 #Increases results in longer time to reach maximum sensitivity
sensitivity_max<-0.95 #This is a parameter in the model but could be hard coded here
#Create vector of cancer sizes (sensitivity pretty much always maxes out at 20mm)
Ca_size<-c(seq(from=0,to=20,by=1))
#Create vector of sensitivities by size
sens_size<-exp((Ca_size - beta2)/beta1)/(1+exp((Ca_size-beta2)/beta1))
#Set max sensitivity to 0.95
sens_size<-replace(sens_size,sens_size>sensitivity_max,sensitivity_max)
#Plot results
plot(Ca_size,sens_size,type="l",ylim=c(0,1),ylab=("Sensitivity"),xlab=("Cancer size (mm)"))
beta1 <- 0.01 #Increases result in longer time to reach maximum sensitivity
beta2 <- 6.51 #Increases results in longer time to reach maximum sensitivity
sensitivity_max<-0.95 #This is a parameter in the model but could be hard coded here
#Create vector of cancer sizes (sensitivity pretty much always maxes out at 20mm)
Ca_size<-c(seq(from=0,to=20,by=1))
#Create vector of sensitivities by size
sens_size<-exp((Ca_size - beta2)/beta1)/(1+exp((Ca_size-beta2)/beta1))
#Set max sensitivity to 0.95
sens_size<-replace(sens_size,sens_size>sensitivity_max,sensitivity_max)
#Plot results
plot(Ca_size,sens_size,type="l",ylim=c(0,1),ylab=("Sensitivity"),xlab=("Cancer size (mm)"))
beta1 <- 0.1 #Increases result in longer time to reach maximum sensitivity
beta2 <- 6.51 #Increases results in longer time to reach maximum sensitivity
sensitivity_max<-0.95 #This is a parameter in the model but could be hard coded here
#Create vector of cancer sizes (sensitivity pretty much always maxes out at 20mm)
Ca_size<-c(seq(from=0,to=20,by=1))
#Create vector of sensitivities by size
sens_size<-exp((Ca_size - beta2)/beta1)/(1+exp((Ca_size-beta2)/beta1))
#Set max sensitivity to 0.95
sens_size<-replace(sens_size,sens_size>sensitivity_max,sensitivity_max)
#Plot results
plot(Ca_size,sens_size,type="l",ylim=c(0,1),ylab=("Sensitivity"),xlab=("Cancer size (mm)"))
beta1 <- 0.5 #Increases result in longer time to reach maximum sensitivity
beta2 <- 6.51 #Increases results in longer time to reach maximum sensitivity
sensitivity_max<-0.95 #This is a parameter in the model but could be hard coded here
#Create vector of cancer sizes (sensitivity pretty much always maxes out at 20mm)
Ca_size<-c(seq(from=0,to=20,by=1))
#Create vector of sensitivities by size
sens_size<-exp((Ca_size - beta2)/beta1)/(1+exp((Ca_size-beta2)/beta1))
#Set max sensitivity to 0.95
sens_size<-replace(sens_size,sens_size>sensitivity_max,sensitivity_max)
#Plot results
plot(Ca_size,sens_size,type="l",ylim=c(0,1),ylab=("Sensitivity"),xlab=("Cancer size (mm)"))
beta1 <- 1 #Increases result in longer time to reach maximum sensitivity
beta2 <- 6.51 #Increases results in longer time to reach maximum sensitivity
sensitivity_max<-0.95 #This is a parameter in the model but could be hard coded here
#Create vector of cancer sizes (sensitivity pretty much always maxes out at 20mm)
Ca_size<-c(seq(from=0,to=20,by=1))
#Create vector of sensitivities by size
sens_size<-exp((Ca_size - beta2)/beta1)/(1+exp((Ca_size-beta2)/beta1))
#Set max sensitivity to 0.95
sens_size<-replace(sens_size,sens_size>sensitivity_max,sensitivity_max)
#Plot results
plot(Ca_size,sens_size,type="l",ylim=c(0,1),ylab=("Sensitivity"),xlab=("Cancer size (mm)"))
beta1 <- 0.4 #Increases result in longer time to reach maximum sensitivity
beta2 <- 6.51 #Increases results in longer time to reach maximum sensitivity
sensitivity_max<-0.95 #This is a parameter in the model but could be hard coded here
#Create vector of cancer sizes (sensitivity pretty much always maxes out at 20mm)
Ca_size<-c(seq(from=0,to=20,by=1))
#Create vector of sensitivities by size
sens_size<-exp((Ca_size - beta2)/beta1)/(1+exp((Ca_size-beta2)/beta1))
#Set max sensitivity to 0.95
sens_size<-replace(sens_size,sens_size>sensitivity_max,sensitivity_max)
#Plot results
plot(Ca_size,sens_size,type="l",ylim=c(0,1),ylab=("Sensitivity"),xlab=("Cancer size (mm)"))
beta1 <- 0.3 #Increases result in longer time to reach maximum sensitivity
beta2 <- 6.51 #Increases results in longer time to reach maximum sensitivity
sensitivity_max<-0.95 #This is a parameter in the model but could be hard coded here
#Create vector of cancer sizes (sensitivity pretty much always maxes out at 20mm)
Ca_size<-c(seq(from=0,to=20,by=1))
#Create vector of sensitivities by size
sens_size<-exp((Ca_size - beta2)/beta1)/(1+exp((Ca_size-beta2)/beta1))
#Set max sensitivity to 0.95
sens_size<-replace(sens_size,sens_size>sensitivity_max,sensitivity_max)
#Plot results
plot(Ca_size,sens_size,type="l",ylim=c(0,1),ylab=("Sensitivity"),xlab=("Cancer size (mm)"))
beta1 <- 0.2 #Increases result in longer time to reach maximum sensitivity
beta2 <- 6.51 #Increases results in longer time to reach maximum sensitivity
sensitivity_max<-0.95 #This is a parameter in the model but could be hard coded here
#Create vector of cancer sizes (sensitivity pretty much always maxes out at 20mm)
Ca_size<-c(seq(from=0,to=20,by=1))
#Create vector of sensitivities by size
sens_size<-exp((Ca_size - beta2)/beta1)/(1+exp((Ca_size-beta2)/beta1))
#Set max sensitivity to 0.95
sens_size<-replace(sens_size,sens_size>sensitivity_max,sensitivity_max)
#Plot results
plot(Ca_size,sens_size,type="l",ylim=c(0,1),ylab=("Sensitivity"),xlab=("Cancer size (mm)"))
beta1 <- 0.1 #Increases result in longer time to reach maximum sensitivity
beta2 <- 6.51 #Increases results in longer time to reach maximum sensitivity
sensitivity_max<-0.95 #This is a parameter in the model but could be hard coded here
#Create vector of cancer sizes (sensitivity pretty much always maxes out at 20mm)
Ca_size<-c(seq(from=0,to=20,by=1))
#Create vector of sensitivities by size
sens_size<-exp((Ca_size - beta2)/beta1)/(1+exp((Ca_size-beta2)/beta1))
#Set max sensitivity to 0.95
sens_size<-replace(sens_size,sens_size>sensitivity_max,sensitivity_max)
#Plot results
plot(Ca_size,sens_size,type="l",ylim=c(0,1),ylab=("Sensitivity"),xlab=("Cancer size (mm)"))
beta1 <- 1.47 #Increases result in longer time to reach maximum sensitivity
beta2 <- 6.51 #Increases results in longer time to reach maximum sensitivity
sensitivity_max<-0.95 #This is a parameter in the model but could be hard coded here
#Create vector of cancer sizes (sensitivity pretty much always maxes out at 20mm)
Ca_size<-c(seq(from=0,to=20,by=1))
#Create vector of sensitivities by size
sens_size<-exp((Ca_size - beta2)/beta1)/(1+exp((Ca_size-beta2)/beta1))
#Set max sensitivity to 0.95
sens_size<-replace(sens_size,sens_size>sensitivity_max,sensitivity_max)
#Plot results
plot(Ca_size,sens_size,type="l",ylim=c(0,1),ylab=("Sensitivity"),xlab=("Cancer size (mm)"))
beta1 <- 1.47 #Increases result in longer time to reach maximum sensitivity
beta2 <- 1 #Increases results in longer time to reach maximum sensitivity
sensitivity_max<-0.95 #This is a parameter in the model but could be hard coded here
#Create vector of cancer sizes (sensitivity pretty much always maxes out at 20mm)
Ca_size<-c(seq(from=0,to=20,by=1))
#Create vector of sensitivities by size
sens_size<-exp((Ca_size - beta2)/beta1)/(1+exp((Ca_size-beta2)/beta1))
#Set max sensitivity to 0.95
sens_size<-replace(sens_size,sens_size>sensitivity_max,sensitivity_max)
#Plot results
plot(Ca_size,sens_size,type="l",ylim=c(0,1),ylab=("Sensitivity"),xlab=("Cancer size (mm)"))
beta1 <- 1.47 #Increases result in longer time to reach maximum sensitivity
beta2 <- 10 #Increases results in longer time to reach maximum sensitivity
sensitivity_max<-0.95 #This is a parameter in the model but could be hard coded here
#Create vector of cancer sizes (sensitivity pretty much always maxes out at 20mm)
Ca_size<-c(seq(from=0,to=20,by=1))
#Create vector of sensitivities by size
sens_size<-exp((Ca_size - beta2)/beta1)/(1+exp((Ca_size-beta2)/beta1))
#Set max sensitivity to 0.95
sens_size<-replace(sens_size,sens_size>sensitivity_max,sensitivity_max)
#Plot results
plot(Ca_size,sens_size,type="l",ylim=c(0,1),ylab=("Sensitivity"),xlab=("Cancer size (mm)"))
beta1 <- 1.47 #Increases result in longer time to reach maximum sensitivity
beta2 <- 6.51 #Increases results in longer time to reach maximum sensitivity
sensitivity_max<-0.95 #This is a parameter in the model but could be hard coded here
#Create vector of cancer sizes (sensitivity pretty much always maxes out at 20mm)
Ca_size<-c(seq(from=0,to=20,by=1))
#Create vector of sensitivities by size
sens_size<-exp((Ca_size - beta2)/beta1)/(1+exp((Ca_size-beta2)/beta1))
#Set max sensitivity to 0.95
sens_size<-replace(sens_size,sens_size>sensitivity_max,sensitivity_max)
#Plot results
plot(Ca_size,sens_size,type="l",ylim=c(0,1),ylab=("Sensitivity"),xlab=("Cancer size (mm)"))
#You can do basic calculations
2+4
25^7
9*(7/3)
#You can create variables and assign values to them with <- or =
utilitystable=0.86
utilitystable<-0.77 #Note, this will overwrite the above value
#You can create variables and assign values to them with <- or =
utilitystable=0.86
utilitystable<-0.77 #Note, this will overwrite the above value
#You can create variables and assign values to them with <- or =
utilitystable=0.86
utilitystable2<-0.77 #Note, this will overwrite the above value
sayhi<-"Hello" #We can also use text in objects using speech marks
#You can ask R to display the value of an object
print(sayhi)
#We can assign a list of values to an object
#This is called a vector. We have to use c() for our list.This means concatenate
utility<-c(1,0.86,0.55,0)
print(utility)
#Sometimes its useful to name stuff to make it easier to interpret
names(utility)<-c("Healthy","Stable","Severe","Dead")
print(utility)
#We can call specific elements of the vector by using square brackets
utility[3]
utility["Severe"]
#We can do mathematical operations on whole vectors
monthlyutility<-utility/12
print(monthlyutility)
#Or specific elements in the vector. Lets reduce healthy to 0.95
utility["Healthy"]<-0.95
print(utility) #Note we'd have to rerun our monthly utility calculation above (Order is important!)
#We can do mathematical operations on whole vectors
monthlyutility<-utility/12
#We can also use data frames. These are essentially tables or a collection of vectors
table<-data.frame(1:10,1:10) #Creates a data frame with 2 columns filled with numbers 1 to 10
print(table)
View(table)
#We can call specific elements in the table but now need two co-ordinates [row number,column number]
table[4,2]
#We can use data in data.frames in regression
#Lets make some fake data
table<-data.frame(rnorm(100,5,2),c(1:1))
View(table)
View(table)
table[,2]<-(table[,1]*2)+(rnorm(100,0,2)) #Column 2 is 2*column 1 plus/minus some randomness
print(table)
#What does that look like on a scatter plot?
plot(table[,1],table[,2],xlab="Column 1",ylab="Column 2")
#What does that look like on a scatter plot?
plot(table[,1],table[,2],xlab="Column 1",ylab="Column 2",col="red")
#What does that look like on a scatter plot?
plot(table[,1],table[,2],xlab="Column 1",ylab="Column 2")
#What does that look like on a scatter plot?
plot(table[,1],table[,2],xlab="Column 1",ylab="Column 2",xlim=c(-5,15))
#What does that look like on a scatter plot?
plot(table[,1],table[,2],xlab="Column 1",ylab="Column 2")
#How do oyu do an OLS regression of column 2 as a function of column 1?
model<-lm(table[,2]~table[,1]) #lm = linear model
summary(model) #Should give a coefficient which is roughly 2
#Can I add a line of best fit using those results to the graph?
coefficients<-model[1] #Our model object has lots of output elements, the coefficients are in element 1
print(coefficients) #This looks like a vector but is something called a list, we need to turn it into a vector to get each coefficient
coefficients<-unlist(coefficients)
print(coefficients) #This is now a vector so we can get the intercept and B1
plot(table[,1],table[,2],xlab="Column 1",ylab="Column 2")
abline(a=coefficients[1],b=coefficients[2],col="red")
install.packages("DiagrammeR")
install.packages("data.tree")
install.packages("heemod")
install.packages("shape")
install.packages("diagram")
install.packages("ggplot2")
install.packages("flexsurv")
install.packages("dplyr")
library("data.tree")
library("heemod")
library("shape")
library("diagram")
library("ggplot2")
library("flexsurv")
library("dplyr")
library("DiagrammeR")
rm(list=ls())
#general parameters
N<-60424 #based on crude incidence of 1.07 (2016) and current UK population
cycle_length<-34
dr<-0.035
acm<-c(0.0119775, 0.013126, 0.0142565, 0.0156355, 0.0172055,
0.019497, 0.0216465, 0.023874, 0.0271235, 0.0304265, 0.033783,
0.0375525, 0.041461, 0.0465925, 0.052426, 0.058713, 0.067142,
0.0756975, 0.084887, 0.096117, 0.1078025, 0.1217215, 0.13626,
0.15048, 0.167086, 0.184636, 0.203201, 0.222409, 0.246654,
0.267129, 0.2882125, 0.306311, 0.340515, 0.363598)
costinflator<-1.006*1.03*1.021*1.017*1.011*1.009*1.013*1.0212*1.0116*1.0231*1.0221*1.0308 #PSSRU unit costs HCHs/NHS inflation 2009-2019
#Decision Tree Parameters
mutationprev<-0.262
cloptolerance<-0.894
mrdasatolerance<-0.836
testcost<-60
testresourcecost<-7.83+9.08 #10 minute nurse time, 5 minute consultant time
#pgxclop parameters
rrclop<-0.702
#clop parameters
clopstroke1<-0.03971
clopstrokeextra<-0.07323
disablingclop<-0.437
#MRD parameters
mrdstroke1<-0.03971
mrdstrokeextra<-0.07323
disablingmrd<-0.451
#ASA parameters
asastroke1<-0.04201
asastrokeextra<-0.07323
disablingasa<-0.451
#costs
coststroke<-1686.04*costinflator
costdisablingstroke<-5175.44*costinflator
costfatal<-8767.69*costinflator
costfatalnonstroke<-2225*costinflator
nondisablestrokeevent<-6409.94*costinflator
disablestrokeevent<-13647.38*costinflator
costclop<-17.34
costmrd<-80.00
costasa<-9.52
costaeclop<-20.10*costinflator
costaemrd<-26.18*costinflator
costaeasa<-22.08*costinflator
#qol
qolstroke<-0.61
qolstroke1<-qolstroke-0.174
qolstroke2<-qolstroke1
qolminorbleed<-0.0033
qolmajorbleed<-0.1426
qolchf<-0.0163
clopaeqol<-(qolminorbleed*0.0093)+(qolmajorbleed*0.0041)+(qolchf*0.0075)
mrdaeqol<-(qolminorbleed*0.0087)+(qolmajorbleed*0.0046)+(qolchf*0.0063)
asaaeqol<-(qolminorbleed*0.0093)+(qolmajorbleed*0.0054)+(qolchf*0.0063)
genotype<-Node$new("CYP2C19 Genotyping")
#Decision tree
plot(genotype)
genotyping<-genotype$AddChild("Genotyping",cost=testcost+testresourcecost)
#Decision tree
plot(genotype)
nogenotyping<-genotype$AddChild("No Genotyping",cost=0)
#Decision tree
plot(genotype)
pgxclopidogrel<-genotyping$AddChild("Clopidogrel",p=1-mutationprev)
#Decision tree
plot(genotype)
pgxmrd<-genotyping$AddChild("MRD+ASA",p=mutationprev)
#Decision tree
plot(genotype)
clopidogrel<-nogenotyping$AddChild("Clopidogrel")
#Decision tree
plot(genotype)
genotype<-Node$new("CYP2C19 Genotyping")
genotyping<-genotype$AddChild("Genotyping",cost=testcost+testresourcecost)
nogenotyping<-genotype$AddChild("No Genotyping",cost=0)
pgxclopidogrel<-genotyping$AddChild("Clopidogrel",p=1-mutationprev)
pgxmrd<-genotyping$AddChild("MRD+ASA",p=mutationprev)
clopidogrel<-nogenotyping$AddChild("Clopidogrel")
pgxcloptol<-pgxclopidogrel$AddChild("Clopidogrel tolerated",p=cloptolerance)
pgxclopnotol<-pgxclopidogrel$AddChild("MRD +ASA",p=1-cloptolerance)
pgxmrdtol<-pgxmrd$AddChild("MRD + ASA tolerated",p=mrdasatolerance)
pgxmrdnotol<-pgxmrd$AddChild("ASA",p=1-mrdasatolerance)
cloptol<-clopidogrel$AddChild("Clopidogrel tolerated",p=cloptolerance)
clopnotol<-clopidogrel$AddChild("MRD + ASA",p=1-cloptolerance)
mrdasatol<-pgxclopnotol$AddChild("MRD + ASA tolerated",p=mrdasatolerance)
mrdasanotol<-pgxclopnotol$AddChild("ASA",p=1-mrdasatolerance)
mrdasatol2<-clopnotol$AddChild("MRD + ASA tolerated",p=mrdasatolerance)
mrdasanotol2<-clopnotol$AddChild("ASA",p=1-mrdasatolerance)
#Decision tree
plot(genotype)
genotype<-Node$new("CYP2C19 Genotyping")
genotyping<-genotype$AddChild("Genotyping",cost=testcost+testresourcecost)
nogenotyping<-genotype$AddChild("No Genotyping",cost=0)
pgxclopidogrel<-genotyping$AddChild("Clopidogrel",p=1-mutationprev)
pgxmrd<-genotyping$AddChild("MRD+ASA",p=mutationprev)
clopidogrel<-nogenotyping$AddChild("Clopidogrel")
pgxcloptol<-pgxclopidogrel$AddChild("Clopidogrel tolerated",p=cloptolerance)
pgxclopnotol<-pgxclopidogrel$AddChild("MRD +ASA",p=1-cloptolerance)
pgxmrdtol<-pgxmrd$AddChild("MRD + ASA tolerated",p=mrdasatolerance)
pgxmrdnotol<-pgxmrd$AddChild("ASA",p=1-mrdasatolerance)
cloptol<-clopidogrel$AddChild("Clopidogrel tolerated",p=cloptolerance)
clopnotol<-clopidogrel$AddChild("MRD + ASA",p=1-cloptolerance)
mrdasatol<-pgxclopnotol$AddChild("MRD + ASA tolerated",p=mrdasatolerance)
mrdasanotol<-pgxclopnotol$AddChild("ASA",p=1-mrdasatolerance)
mrdasatol2<-clopnotol$AddChild("MRD + ASA tolerated",p=mrdasatolerance)
mrdasanotol2<-clopnotol$AddChild("ASA",p=1-mrdasatolerance)
summary(genotype)
rollbacka<-data.frame(prob=pgxcloptol$Get("p",traversal="ancestor"),cost=pgxcloptol$Get("cost",traversal="ancestor"))
rollbackb<-data.frame(prob=mrdasatol$Get("p",traversal="ancestor"),cost=mrdasatol$Get("cost",traversal="ancestor"))
rollbackc<-data.frame(prob=mrdasanotol$Get("p",traversal="ancestor"),cost=mrdasanotol$Get("cost",traversal="ancestor"))
rollbackd<-data.frame(prob=pgxmrdtol$Get("p",traversal="ancestor"),cost=pgxmrdtol$Get("cost",traversal="ancestor"))
rollbacke<-data.frame(prob=pgxmrdnotol$Get("p",traversal="ancestor"),cost=pgxmrdnotol$Get("cost",traversal="ancestor"))
rollbackf<-data.frame(prob=cloptol$Get("p",traversal="ancestor"),cost=cloptol$Get("cost",traversal="ancestor"))
rollbackg<-data.frame(prob=mrdasatol2$Get("p",traversal="ancestor"),cost=mrdasatol2$Get("cost",traversal="ancestor"))
rollbackh<-data.frame(prob=mrdasanotol2$Get("p",traversal="ancestor"),cost=mrdasanotol2$Get("cost",traversal="ancestor"))
View(rollbacka)
View(rollbacka)
View(rollbackb)
View(rollbackb)
condprobs=c(prod(rollbacka[1:2,1]),prod(rollbackb[1:3,1]),prod(rollbackc[1:3,1]),prod(rollbackd[1:2,1]),prod(rollbacke[1:2,1]),prod(rollbackf[1:1,1]),prod(rollbackg[1:2,1]),prod(rollbackh[1:2,1]))
costtest<-c(prod(rollbacka[3,2]),prod(rollbackb[4,2]),prod(rollbackc[4,2]),prod(rollbackd[3,2]),prod(rollbacke[3,2]),prod(rollbackf[3,2]),prod(rollbackg[4,2]),prod(rollbackh[4,2]))
patientflow<-N*condprobs
totalcosts<-patientflow*testcost
totaltestcost<-sum(totalcosts)
patientflow
shiny::runApp('C:/Users/mdxassw4/Dropbox (The University of Manchester)/JM + SW shared DCE folder/Shiny App')
runApp('C:/Users/mdxassw4/Dropbox (The University of Manchester)/JM + SW shared DCE folder/Shiny App')
shiny::runApp('C:/Users/mdxassw4/Dropbox (The University of Manchester)/JM + SW shared DCE folder/Shiny App')
install.packages("shinysender")
devtools::install_github("UoMResearchIT/r-shinysender@rsconnect_0.8")
install.packages("devtools")
devtools::install_github("UoMResearchIT/r-shinysender@rsconnect_0.8")
Sys.setenv(SHINYSENDER_SERVER="shiny.its.manchester.ac.uk")
Sys.setenv(SHINYSENDER_USER="mdxassw4")
library("shinysender")
Sys.setenv(SHINYSENDER_SERVER="shiny.its.manchester.ac.uk")
Sys.setenv(SHINYSENDER_USER="mdxassw4")
shiny::runApp('GitHub/Shiny-PGX')
Sys.setenv(SHINYSENDER_REMOTENAME="shinypgx")
runApp('GitHub/Shiny-PGX')
shinysender::ss_uploadAddin()
runApp('GitHub/Shiny-PGX')
runApp('GitHub/Shiny-PGX')
library("parallel")
library("mgcv")
library("tidyverse")
screen_strategies<-c(0,1,2,3,4,9)
screen_strategy<-0
load(paste("PSA results/PSA_",screen_strategy,"_",1,".Rdata",sep = ""))
#Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library("parallel")
library("mgcv")
library("tidyverse")
screen_strategies<-c(0,1,2,3,4,9)
screen_strategy<-0
load(paste("PSA results/PSA_",screen_strategy,"_",1,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
results<-results[-c(3:4)]
psaresults<-results
for (i in 2:10){
#name of saved files needed
load(paste("PSA results/PSA_",screen_strategy,"_",i,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
results<-results[-c(3:4)]
psaresults<-rbind(psaresults,results)
}
for (j in 2:6){
screen_strategy<-screen_strategies[j]
for (i in 1:10){
#name of saved files needed
load(paste("PSA results/PSA_",screen_strategy,"_",i,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
results<-results[-c(3:4)]
psaresults<-rbind(psaresults,results)
}
}
