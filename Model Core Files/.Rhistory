print(table)
#What does that look like on a scatter plot?
plot(table[,1],table[,2],xlab="Column 1",ylab="Column 2")
#What does that look like on a scatter plot?
plot(table[,1],table[,2],xlab="Column 1",ylab="Column 2",col="red")
#What does that look like on a scatter plot?
plot(table[,1],table[,2],xlab="Column 1",ylab="Column 2")
#What does that look like on a scatter plot?
plot(table[,1],table[,2],xlab="Column 1",ylab="Column 2",xlim=c(-5,15))
#What does that look like on a scatter plot?
plot(table[,1],table[,2],xlab="Column 1",ylab="Column 2")
#How do oyu do an OLS regression of column 2 as a function of column 1?
model<-lm(table[,2]~table[,1]) #lm = linear model
summary(model) #Should give a coefficient which is roughly 2
#Can I add a line of best fit using those results to the graph?
coefficients<-model[1] #Our model object has lots of output elements, the coefficients are in element 1
print(coefficients) #This looks like a vector but is something called a list, we need to turn it into a vector to get each coefficient
coefficients<-unlist(coefficients)
print(coefficients) #This is now a vector so we can get the intercept and B1
plot(table[,1],table[,2],xlab="Column 1",ylab="Column 2")
abline(a=coefficients[1],b=coefficients[2],col="red")
install.packages("DiagrammeR")
install.packages("data.tree")
install.packages("heemod")
install.packages("shape")
install.packages("diagram")
install.packages("ggplot2")
install.packages("flexsurv")
install.packages("dplyr")
library("data.tree")
library("heemod")
library("shape")
library("diagram")
library("ggplot2")
library("flexsurv")
library("dplyr")
library("DiagrammeR")
rm(list=ls())
#general parameters
N<-60424 #based on crude incidence of 1.07 (2016) and current UK population
cycle_length<-34
dr<-0.035
acm<-c(0.0119775, 0.013126, 0.0142565, 0.0156355, 0.0172055,
0.019497, 0.0216465, 0.023874, 0.0271235, 0.0304265, 0.033783,
0.0375525, 0.041461, 0.0465925, 0.052426, 0.058713, 0.067142,
0.0756975, 0.084887, 0.096117, 0.1078025, 0.1217215, 0.13626,
0.15048, 0.167086, 0.184636, 0.203201, 0.222409, 0.246654,
0.267129, 0.2882125, 0.306311, 0.340515, 0.363598)
costinflator<-1.006*1.03*1.021*1.017*1.011*1.009*1.013*1.0212*1.0116*1.0231*1.0221*1.0308 #PSSRU unit costs HCHs/NHS inflation 2009-2019
#Decision Tree Parameters
mutationprev<-0.262
cloptolerance<-0.894
mrdasatolerance<-0.836
testcost<-60
testresourcecost<-7.83+9.08 #10 minute nurse time, 5 minute consultant time
#pgxclop parameters
rrclop<-0.702
#clop parameters
clopstroke1<-0.03971
clopstrokeextra<-0.07323
disablingclop<-0.437
#MRD parameters
mrdstroke1<-0.03971
mrdstrokeextra<-0.07323
disablingmrd<-0.451
#ASA parameters
asastroke1<-0.04201
asastrokeextra<-0.07323
disablingasa<-0.451
#costs
coststroke<-1686.04*costinflator
costdisablingstroke<-5175.44*costinflator
costfatal<-8767.69*costinflator
costfatalnonstroke<-2225*costinflator
nondisablestrokeevent<-6409.94*costinflator
disablestrokeevent<-13647.38*costinflator
costclop<-17.34
costmrd<-80.00
costasa<-9.52
costaeclop<-20.10*costinflator
costaemrd<-26.18*costinflator
costaeasa<-22.08*costinflator
#qol
qolstroke<-0.61
qolstroke1<-qolstroke-0.174
qolstroke2<-qolstroke1
qolminorbleed<-0.0033
qolmajorbleed<-0.1426
qolchf<-0.0163
clopaeqol<-(qolminorbleed*0.0093)+(qolmajorbleed*0.0041)+(qolchf*0.0075)
mrdaeqol<-(qolminorbleed*0.0087)+(qolmajorbleed*0.0046)+(qolchf*0.0063)
asaaeqol<-(qolminorbleed*0.0093)+(qolmajorbleed*0.0054)+(qolchf*0.0063)
genotype<-Node$new("CYP2C19 Genotyping")
#Decision tree
plot(genotype)
genotyping<-genotype$AddChild("Genotyping",cost=testcost+testresourcecost)
#Decision tree
plot(genotype)
nogenotyping<-genotype$AddChild("No Genotyping",cost=0)
#Decision tree
plot(genotype)
pgxclopidogrel<-genotyping$AddChild("Clopidogrel",p=1-mutationprev)
#Decision tree
plot(genotype)
pgxmrd<-genotyping$AddChild("MRD+ASA",p=mutationprev)
#Decision tree
plot(genotype)
clopidogrel<-nogenotyping$AddChild("Clopidogrel")
#Decision tree
plot(genotype)
genotype<-Node$new("CYP2C19 Genotyping")
genotyping<-genotype$AddChild("Genotyping",cost=testcost+testresourcecost)
nogenotyping<-genotype$AddChild("No Genotyping",cost=0)
pgxclopidogrel<-genotyping$AddChild("Clopidogrel",p=1-mutationprev)
pgxmrd<-genotyping$AddChild("MRD+ASA",p=mutationprev)
clopidogrel<-nogenotyping$AddChild("Clopidogrel")
pgxcloptol<-pgxclopidogrel$AddChild("Clopidogrel tolerated",p=cloptolerance)
pgxclopnotol<-pgxclopidogrel$AddChild("MRD +ASA",p=1-cloptolerance)
pgxmrdtol<-pgxmrd$AddChild("MRD + ASA tolerated",p=mrdasatolerance)
pgxmrdnotol<-pgxmrd$AddChild("ASA",p=1-mrdasatolerance)
cloptol<-clopidogrel$AddChild("Clopidogrel tolerated",p=cloptolerance)
clopnotol<-clopidogrel$AddChild("MRD + ASA",p=1-cloptolerance)
mrdasatol<-pgxclopnotol$AddChild("MRD + ASA tolerated",p=mrdasatolerance)
mrdasanotol<-pgxclopnotol$AddChild("ASA",p=1-mrdasatolerance)
mrdasatol2<-clopnotol$AddChild("MRD + ASA tolerated",p=mrdasatolerance)
mrdasanotol2<-clopnotol$AddChild("ASA",p=1-mrdasatolerance)
#Decision tree
plot(genotype)
genotype<-Node$new("CYP2C19 Genotyping")
genotyping<-genotype$AddChild("Genotyping",cost=testcost+testresourcecost)
nogenotyping<-genotype$AddChild("No Genotyping",cost=0)
pgxclopidogrel<-genotyping$AddChild("Clopidogrel",p=1-mutationprev)
pgxmrd<-genotyping$AddChild("MRD+ASA",p=mutationprev)
clopidogrel<-nogenotyping$AddChild("Clopidogrel")
pgxcloptol<-pgxclopidogrel$AddChild("Clopidogrel tolerated",p=cloptolerance)
pgxclopnotol<-pgxclopidogrel$AddChild("MRD +ASA",p=1-cloptolerance)
pgxmrdtol<-pgxmrd$AddChild("MRD + ASA tolerated",p=mrdasatolerance)
pgxmrdnotol<-pgxmrd$AddChild("ASA",p=1-mrdasatolerance)
cloptol<-clopidogrel$AddChild("Clopidogrel tolerated",p=cloptolerance)
clopnotol<-clopidogrel$AddChild("MRD + ASA",p=1-cloptolerance)
mrdasatol<-pgxclopnotol$AddChild("MRD + ASA tolerated",p=mrdasatolerance)
mrdasanotol<-pgxclopnotol$AddChild("ASA",p=1-mrdasatolerance)
mrdasatol2<-clopnotol$AddChild("MRD + ASA tolerated",p=mrdasatolerance)
mrdasanotol2<-clopnotol$AddChild("ASA",p=1-mrdasatolerance)
summary(genotype)
rollbacka<-data.frame(prob=pgxcloptol$Get("p",traversal="ancestor"),cost=pgxcloptol$Get("cost",traversal="ancestor"))
rollbackb<-data.frame(prob=mrdasatol$Get("p",traversal="ancestor"),cost=mrdasatol$Get("cost",traversal="ancestor"))
rollbackc<-data.frame(prob=mrdasanotol$Get("p",traversal="ancestor"),cost=mrdasanotol$Get("cost",traversal="ancestor"))
rollbackd<-data.frame(prob=pgxmrdtol$Get("p",traversal="ancestor"),cost=pgxmrdtol$Get("cost",traversal="ancestor"))
rollbacke<-data.frame(prob=pgxmrdnotol$Get("p",traversal="ancestor"),cost=pgxmrdnotol$Get("cost",traversal="ancestor"))
rollbackf<-data.frame(prob=cloptol$Get("p",traversal="ancestor"),cost=cloptol$Get("cost",traversal="ancestor"))
rollbackg<-data.frame(prob=mrdasatol2$Get("p",traversal="ancestor"),cost=mrdasatol2$Get("cost",traversal="ancestor"))
rollbackh<-data.frame(prob=mrdasanotol2$Get("p",traversal="ancestor"),cost=mrdasanotol2$Get("cost",traversal="ancestor"))
View(rollbacka)
View(rollbacka)
View(rollbackb)
View(rollbackb)
condprobs=c(prod(rollbacka[1:2,1]),prod(rollbackb[1:3,1]),prod(rollbackc[1:3,1]),prod(rollbackd[1:2,1]),prod(rollbacke[1:2,1]),prod(rollbackf[1:1,1]),prod(rollbackg[1:2,1]),prod(rollbackh[1:2,1]))
costtest<-c(prod(rollbacka[3,2]),prod(rollbackb[4,2]),prod(rollbackc[4,2]),prod(rollbackd[3,2]),prod(rollbacke[3,2]),prod(rollbackf[3,2]),prod(rollbackg[4,2]),prod(rollbackh[4,2]))
patientflow<-N*condprobs
totalcosts<-patientflow*testcost
totaltestcost<-sum(totalcosts)
patientflow
shiny::runApp('C:/Users/mdxassw4/Dropbox (The University of Manchester)/JM + SW shared DCE folder/Shiny App')
runApp('C:/Users/mdxassw4/Dropbox (The University of Manchester)/JM + SW shared DCE folder/Shiny App')
shiny::runApp('C:/Users/mdxassw4/Dropbox (The University of Manchester)/JM + SW shared DCE folder/Shiny App')
install.packages("shinysender")
devtools::install_github("UoMResearchIT/r-shinysender@rsconnect_0.8")
install.packages("devtools")
devtools::install_github("UoMResearchIT/r-shinysender@rsconnect_0.8")
Sys.setenv(SHINYSENDER_SERVER="shiny.its.manchester.ac.uk")
Sys.setenv(SHINYSENDER_USER="mdxassw4")
library("shinysender")
Sys.setenv(SHINYSENDER_SERVER="shiny.its.manchester.ac.uk")
Sys.setenv(SHINYSENDER_USER="mdxassw4")
shiny::runApp('GitHub/Shiny-PGX')
Sys.setenv(SHINYSENDER_REMOTENAME="shinypgx")
runApp('GitHub/Shiny-PGX')
shinysender::ss_uploadAddin()
runApp('GitHub/Shiny-PGX')
runApp('GitHub/Shiny-PGX')
#Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library("dampack")
library(gt)
library(tidyverse)
library(magrittr)
#Create Output data.frame
output_df <- data.frame(matrix(nrow=6,ncol=4))
#Define vector of strategies to evaluate
#These must align with the values used in the screen strategy parameter in the main script
#Data must have been generated for each strategy used
screen_strategies<-c(0,1,2,3,4,9)
#Import data, dropping uneccessary columns to save space
for (j in 1:length(screen_strategies)){
screen_strategy<-screen_strategies[j]
load(paste("Deterministic results/Determ_",screen_strategy,"_",1,".Rdata",sep = ""))
#Remove women with cancer diagnosed before age 50
results<-results %>% filter(results[,4]>50 | results[,4]==0)
results<-results[-c(4:8)]
results<-results[-c(5:14)]
detresults<-results
for (i in 2:10){
#name of saved files needed
load(paste("Deterministic results/Determ_",screen_strategy,"_",i,".Rdata",sep = ""))
#Remove women with cancer diagnosed before age 50
results<-results %>% filter(results[,4]>50 | results[,4]==0)
results<-results[-c(4:8)]
results<-results[-c(5:14)]
detresults<-rbind(detresults,results)
}
#Produce average output values for each strategy
output_df[j,]<-c(mean(detresults[,1]),mean(detresults[,2]),mean(detresults[,3]),mean(detresults[,4]))
}
#Assign names to strategies
#Note-currently fixed to 6 strategies considered in final paper
strategies<-c("No Screening","Risk-1","Risk-2","3 Yearly","2 Yearly","Risk-3")
rownames(output_df) <- strategies
colnames(output_df)<-c("qaly","cost","screens","life years")
#Calculate Incremental Results
output_df[,"incQALYS"]<-c(output_df$qaly-output_df$qaly[1])
output_df[,"incCost"]<-c(output_df$cost-output_df$cost[1])
output_df[,"ICER"]<-c(output_df$incCost/output_df$incQALYS)
output_df[,"NB20k"]<-c((output_df$incQALYS*20000)-output_df$incCost)
output_df[,"NB30k"]<-c((output_df$incQALYS*30000)-output_df$incCost)
icer_strat<-calculate_icers(cost=output_df$cost,
effect=output_df$qaly,
strategies = c(row.names(output_df)))
plot(icer_strat,currency="£", label="all")
fnIncCU <- function(Names, Costs, QALYs , blnNHB=TRUE, WTP=c(20000,30000), blnCUP=TRUE, costDP = 2, qalyDP = 5, icerDP = 2) {
nn <- NROW(Names)
IncCU <- tibble(StratName  = Names,
Cost       = Costs,
QALY       = QALYs,
dom        = FALSE,
extdom     = FALSE,
comp       = 1,
IncCost    = 0,
IncQALY    = 0,
ICER       = 0,
strICER    = "-",
strIncCost = "-",
strIncQALY = "-",
strCost    = format(round(Cost, costDP), nsmall = costDP, big.mark=","),
strQALY    = format(round(QALY, qalyDP), nsmall = qalyDP, big.mark=",")) %>%
arrange(Cost) %>%
mutate(ID = row_number())
for (i in 2:nn) {
comp <- max(which(!IncCU$dom[1:(i-1)] & !IncCU$extdom[1:(i-1)]))
IncCU$comp[i]       <- comp
IncCU$IncCost[i]    <- IncCU$Cost[i]-IncCU$Cost[comp]
IncCU$IncQALY[i]    <- IncCU$QALY[i]-IncCU$QALY[comp]
IncCU$ICER[i]       <- IncCU$IncCost[i] / IncCU$IncQALY[i]
IncCU$dom[i]        <- max(IncCU$QALY[1:(i-1)]) > IncCU$QALY[i]
IncCU$extdom[i]     <- if (i==nn) FALSE else any(IncCU$QALY[(i+1):nn]>IncCU$QALY[i] & (IncCU$Cost[(i+1):nn]-IncCU$Cost[comp])/(IncCU$QALY[(i+1):nn]-IncCU$QALY[comp]) < IncCU$ICER[i])
IncCU$strICER[i]    <- ifelse(IncCU$dom[i], "dominated", ifelse(IncCU$extdom[i], "extendedly dominated", format(round(IncCU$ICER[i], icerDP), nsmall = icerDP, big.mark=",")))
IncCU$strIncCost[i] <- format(round(IncCU$IncCost[i], costDP), nsmall = costDP, big.mark=",")
IncCU$strIncQALY[i] <- format(round(IncCU$IncQALY[i], qalyDP), nsmall = qalyDP, big.mark=",")
}
if (blnNHB) {
IncCU %<>%
rowwise() %>%
mutate(NHB = map2(Cost, QALY, ~ (QALY - Cost / WTP) %>%
setNames(paste0("NHB", WTP)))) %>%
unnest_wider(NHB) %>%
mutate(across(starts_with("NHB"), ~ rank(desc(.x)), .names = "rank{.col}"))
}
if (blnCUP) {
or.x <- IncCU$QALY[which(IncCU$Cost==min(IncCU$Cost))]
or.y <- min(IncCU$Cost)
ax.x <- fnAxisScale(min(IncCU$QALY), max(IncCU$QALY))
ax.y <- fnAxisScale(or.y, max(IncCU$Cost))
tl.x <- (ax.x$dMax - ax.x$dMin) / 50
tl.y <- (ax.y$dMax - ax.y$dMin) / 50
nt.x <- ((ax.x$dMax - ax.x$dMin) / ax.x$dMajor + 1) %>% round(0)
nt.y <- ((ax.y$dMax - ax.y$dMin) / ax.y$dMajor + 1) %>% round(0)
tblXT <- tibble(x  = ax.x$dMin + (1:nt.x-1)*ax.x$dMajor,
y1 = or.y - tl.y/2,
y2 = or.y + tl.y/2)
tblYT <- tibble(y  = ax.y$dMin + (1:nt.y-1)*ax.y$dMajor,
x1 = or.x - tl.x/2,
x2 = or.x + tl.x/2)
plt <- IncCU %>%
ggplot(aes(x=QALY, y=Cost)) +
geom_abline(slope     = WTP[1],
intercept = seq(ax.y$dMin - ax.y$dMajor * 100,
ax.y$dMax + ax.y$dMajor * 100,
ax.y$dMajor) - or.x * WTP[1],
colour    = "white",
lty       = 5,
linewidth      = 1) +
geom_hline(yintercept = or.y,
linewidth       = 1.25) +
geom_segment(data = tblXT,
aes(x    = x,
xend = x,
y    = y1,
yend = y2),
linewidth = 1.25) +
geom_vline(xintercept = or.x, linewidth = 1.25) +
geom_segment(data = tblYT,
aes(y    = y,
yend = y,
x    = x1,
xend = x2),
linewidth = 1.25) +
geom_line(data = IncCU %>%
filter(str_detect(strICER, "dominated", negate = T)),
aes(x = QALY,
y = Cost),
colour = "red", linewidth = 1.25) +
geom_point(shape = 19, colour = "darkgreen", size = 10) +
geom_text(aes(label = ID),
colour = "white", size = 12 * 1/72 * 25.4) +
scale_x_continuous(limits = c(ax.x$dMin, ax.x$dMax*1.000000001),
breaks = seq(ax.x$dMin, ax.x$dMax, ax.x$dMajor),
labels = seq(ax.x$dMin, ax.x$dMax, ax.x$dMajor),
name   = "QALYs") +
scale_y_continuous(limits = c(ax.y$dMin, ax.y$dMax*1.000000001),
breaks = seq(ax.y$dMin, ax.y$dMax, ax.y$dMajor),
labels = scales::number_format(prefix = "£",
big.mark = ","),
name   = "Costs\n") +
theme(panel.background = element_rect(fill = "grey75"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text        = element_text(size = 12),
axis.title       = element_text(size = 12, face = "bold"),
axis.ticks       = element_blank())
} else plt <- NULL
prettyIncCU <- IncCU %>%
select(ID,
StratName,
strCost,
strQALY,
strIncCost,
strIncQALY,
strICER,
contains("NHB")) %>%
gt() %>%
cols_label(
StratName  = "Strategy",
strCost    = "Costs\n(£)",
strQALY    = "Effects\n(QALYs)",
strIncCost = "Costs\n(£)",
strIncQALY = "Effects\n(QALYs)",
strICER    = "ICER\n(£/QALY)") %>%
cols_label_with(
starts_with("NHB"), ~ paste0("£", as.numeric(str_sub(.x, 4))/1000, "K/QALY")) %>%
cols_label_with(
starts_with("rankNHB"), ~ paste0("£", as.numeric(str_sub(.x, 8))/1000, "K/QALY")) %>%
tab_spanner(label = "Incremental",
columns = c(strIncCost, strIncQALY, strICER)) %>%
tab_spanner(label = "Net health benefit",
columns = starts_with("NHB")) %>%
tab_spanner(label = "Rank",
columns = starts_with("rankNHB")) %>%
cols_align(align = "center",
columns = -c(StratName)) %>%
opt_horizontal_padding(scale = 2) %>%
opt_table_font(font = "Arial")
return(list(IncCU       = IncCU,
prettyIncCU = prettyIncCU,
CUplane     = plt))
}
fnAxisScale <- function(dMin, dMax) {
## adapted from some VBA of Jon Peltier's
## https://peltiertech.com/calculate-nice-axis-scales-in-excel-vba/
if (dMax == dMin) {
dTemp = dMax
dMax = dMax * 1.01
dMin = dMin * 0.99
}
if (dMax < dMin) {
dTemp = dMax
dMax = dMin
dMin = dTemp
}
if (dMax != 0) {
if (dMax > 0) {
dMax = dMax + (dMax - dMin) * 0.01
}
else {
dMax = min(dMax + (dMax - dMin) * 0.01, 0)
}
}
if (dMin != 0) {
if (dMin > 0) {
dMin = max(dMin - (dMax - dMin) * 0.01, 0)
}
else {
dMin = dMin - (dMax - dMin) * 0.01
}
}
if (dMax == 0 & dMin == 0) dMax = 1
dPower = log(dMax - dMin) / log(10)
dScale = 10 ^ (dPower - trunc(dPower))
dScale <- case_when(
between(dScale, 0, 2.5) ~ 0.2,
between(dScale, 2.5, 5) ~ 0.5,
between(dScale, 5, 7.5) ~ 1,
TRUE                    ~ 2,
)
dSmall <- case_when(
between(dScale, 0, 2.5) ~ 0.05,
between(dScale, 2.5, 5) ~ 0.1,
between(dScale, 5, 7.5) ~ 0.2,
TRUE                    ~ 0.5,
)
dScale = dScale * 10 ^ trunc(dPower)
dSmall = dSmall * 10 ^ trunc(dPower)
list (dMin = dScale * trunc(dMin / dScale),
dMax = dScale * (trunc(dMax / dScale) + 1),
dMajor = dScale,
dMinor = dSmall)
}
IncCU <- fnIncCU(Names=rownames(output_df), Costs=output_df$cost, QALYs=output_df$qaly)
IncCU$prettyIncCU
saveRDS(IncCU,"riskstratcu.RDS")
library("mgcv")
library("dampack")
library(gt)
library(tidyverse)
library(magrittr)
library("MASS")
mcruns<-1000000
alternative<-c(0,1,2,3,4,9)
wtp<-seq(from=0,to=100000,by=1000)
modQ<-readRDS("QALYmodelslim.RDS")
modC<-readRDS("costmodelslim.RDS")
#Draw stage I to III survival parameters
survmvn<-data.frame(c(-5.46208,-5.2077,-5.8016),
c(-3.8163,-3.75901,-3.8811),
c(-2.72264,-2.66053,-2.78617))
survcovmat<-cov(survmvn)
survmeans<-c(survmvn[1,1],survmvn[1,2],survmvn[1,3])
PSA_gamma_survival<-mvrnorm(mcruns,survmeans,survcovmat)
# Draw Metatstatic survival parameters
metmvn<-data.frame(c(-1.78723,-1.67922,-1.89434),c(-1.38762,-1.33512,-1.49956),c(-1.01051,-0.93338,-1.08304))
metmat<-cov(metmvn)
metmeans<-c(metmvn[1,1],metmvn[1,2],metmvn[1,3])
PSA_meta_survival<-mvrnorm(mcruns,metmeans,metmat)
#Draw Mammography with sensitivity conditional on tumour diameter parameters W-F
PSA_beta1 <- rnorm(mcruns,1.47,0.1)
PSA_beta2 <- rnorm(mcruns,6.51,0.5)
#Draw Mammography sensitivity by volpara density grade from PREVENTICON
PSA_Sen_VDG <- data.frame(rbeta(mcruns,96,16),rbeta(mcruns,298,86),rbeta(mcruns,212,93),rbeta(mcruns,61,39))
Sen_VDG_av <- 0.757
#Draw supplemental Screening CDRs
PSA_MRI_cdr <- rbeta(mcruns,99.495,19799.5) #CDR for MRI in Mammo negative women (incremental)
PSA_US_cdr <- rbeta(mcruns,35.89,11927) #CDR for US in Mammo negative women (incremental)
#Draw tumour growth rate parameters
PSA_log_norm_mean <- rnorm(mcruns,1.07,0.09)
PSA_log_norm_sd <- rnorm(mcruns,1.31,0.11)
#Draw costs
PSA_cost_strat<-(rlnorm(mcruns,2.13387381,0.06349671)*1.0272)
PSA_costvar<-rnorm(mcruns,0,0.1020408)
PSA_costscreen<-rnorm(mcruns,0,0.1020408)
PSA_cost_follow_up<-rnorm(mcruns,0,0.1020408)
PSA_cost_biop<-rnorm(mcruns,0,0.1020408)
PSA_cost_US<-rnorm(mcruns,0,0.1020408)
PSA_cost_MRI<-rnorm(mcruns,0,0.1020408)
#Generate utility draws
utilmat<-data.frame(c(1-0.82,1-0.81,1-0.83),c(1-0.75,1-0.73,1-0.77))
lnutilmat<-log(utilmat)
covutil<-cov(lnutilmat)
utilmeans<-c(log(1-0.82),log(1-0.75))
PSA_util<-1-exp(mvrnorm(mcruns,utilmeans,covutil))
#Bind monte carlo draws
PSA_all_p<-cbind(PSA_gamma_survival,PSA_meta_survival,PSA_beta1,PSA_beta2,
PSA_Sen_VDG,PSA_MRI_cdr,PSA_US_cdr,PSA_log_norm_mean,
PSA_log_norm_sd,PSA_cost_strat,PSA_costvar,PSA_util,PSA_costscreen,
PSA_cost_follow_up,PSA_cost_biop,PSA_cost_US,PSA_cost_MRI)
PSA_all_p<-as.data.frame(PSA_all_p)
colnames(PSA_all_p)<-c("PSA_gamma_survival_1","PSA_gamma_survival_2","PSA_gamma_survival_3",
"PSA_meta_survival_54","PSA_meta_survival_74","PSA_meta_survival_99",
"PSA_beta_1","PSA_beta_2",'PSA_VDG1_sen','PSA_VDG2_sen',
'PSA_VDG3_sen', 'PSA_VDG4_sen',"PSA_MRI_cdr","PSA_US_cdr",
"PSA_log_norm_mean","PSA_log_norm_sd","PSA_cost_strat","PSA_costvar",
"PSA_util_1to3","PSA_util_4","PSA_costscreen","PSA_cost_follow_up",
"PSA_cost_biop","PSA_cost_US","PSA_cost_MRI")
alt_names<-c("No Screening","Risk-1","Risk-2","3 yearly","2 yearly","Risk-3")
output_costs<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
output_qalys<-data.frame(matrix(nrow=mcruns,ncol=length(alternative)))
colnames(output_costs)<-alt_names
colnames(output_qalys)<-alt_names
for (i in 1:length(alternative)){
PSA_all_p$alternative<-as.factor(alt_names[i])
#Predict QALYs and Costs using GAMS
output_qalys[,i]<-predict.bam(modQ,PSA_all_p)
output_costs[,i]<-predict.bam(modC,PSA_all_p)
}
alt_names<-c("No Screening","Risk-1","Risk-2","Three yearly","Two yearly","Risk-3")
colnames(output_costs)<-alt_names
colnames(output_qalys)<-alt_names
psa_obj <- make_psa_obj(cost = output_costs,
effectiveness = output_qalys,
parameters = PSA_all_p,
strategies = alt_names,
currency = "£")
ceac_obj<- ceac(wtp,psa_obj)
plot(ceac_obj,frontier="FALSE",points="FALSE",xlab="Willingness to Pay (Thousand £ / QALY")
plot(ceac_obj,frontier="FALSE",points="FALSE",currency="£",xlab="Willingness to Pay (Thousand £ / QALY")
feasqalys<-output_qalys[-c(3,5)]
feascosts<-output_costs[-c(3,5)]
feas_psa_obj <- make_psa_obj(cost = feascosts,
effectiveness = feasqalys,
parameters = PSA_all_p,
strategies = alt_names[-c(3,5)],
currency = "£")
feas_ceac_obj<- ceac(wtp,feas_psa_obj)
plot(feas_ceac_obj,frontier="FALSE",points="FALSE",currency="£",xlab="Willingness to Pay (Thousand £ / QALY")
