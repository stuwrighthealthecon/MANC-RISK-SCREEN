##########Counters i loop level######################
#screen-detected cancer counts
screen_detected_count <- 0
sdfirst_counter <- 0
sdlast_counter <-0
#count of screens
screen_counter <- 0
lastscreen_counter <-0
US_counter <- 0
MRI_counter <- 0
#recall count
recall_counter <- 0
#total cost
cost_counter <- 0
#total life years
LY_counter <- 0
#total QALYs
QALY_counter <- 0
#Cancer stage counters
stage1_counter <- 0
stage2_counter <- 0
stage3_counter <- 0
stage4_counter <- 0
DCIS_counter <- 0
#######J loop for individual experience of breast cancer screening)
for (j in jnum){
#Set J level counters
screen_count <- 0
missed_screen<- 0
recall_count <- 0
sdlast_cancer <-0
lastscreen_count <- 0
sdfirst_cancer <- 0
stage_cat <- 0
MRI_count <- 0
US_count <- 0
incidence_age_record <- 0
costs <- 0
US_costs <- 0
MRI_costs <- 0
costs_follow_up <- 0
#Lifetime cancer incidence
#Determines if a cancer occurs and at what age
if (risk_data$cancer==1){
ca_case<-1
#Determine cancer growth rate
grow_rate_i<-risk_data$growth_rate
#Incidence age (under current programme)
ca_incidence_i <- cmp_incidence_function()
ca_incidence_age <- ca_incidence_i[1]
#Clinical detection age
CD_size <- ca_incidence_i[4]#tumour diameter at CD
#The detection age is either the age at clinical detection
#or a formula is applied to determine the age at screen
#detection
if(ca_incidence_i[2] ==1){CD_age <- ca_incidence_i[1]} else
CD_age <- ca_incidence_i[1] + ((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(ca_incidence_i[4]/2)^3))^0.25-1))/(0.25*grow_rate_i)) -
((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(ca_incidence_i[3]/2)^3))^0.25-1))/(0.25*grow_rate_i))
cancer_diagnostic[8] <- c(CD_age)
#Calculate tumour genesis age
t_gen <- ((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(CD_size/2)^3))^0.25-1))/(0.25*grow_rate_i)) #Calculate time to get to clinical detection size
gen_age <- CD_age - t_gen
} else {
ca_case <- 0
ca_incidence_age <- 999 #redundent but ensures after end of simulation if called
CD_age <- 999 #redundent but ensures after end of simulation if called
}
#All cause moratlity
#Get a mortality age and make sure this is greater than start age and cancer incidence age
Mort_age <- risk_data$life_expectancy
#Ca incidence ('original' incidence time) trumps mortality
#because it is probability conditional on survival
if(ca_case == 1 & Mort_age <= ca_incidence_age){Mort_age <-qweibull(p = dqrunif(n = 1,min = pweibull(q = CD_age,shape = acmmortality_wb_a,scale = acmmortality_wb_b), max = 1),shape = acmmortality_wb_a, scale = acmmortality_wb_b)}
if(Mort_age >= time_horizon){Mort_age <- 99.99}
cancer_diagnostic[7] <- c(Mort_age)
#Other individual variables
age <- start_age
interval_ca <- 0
screen_detected_ca <- 0
#####################DES COMPONENT #######################
Time_to_screen <- screen_times[1] - age #select the current next screen age and subtract age
Time_to_death <- Mort_age - age #time to death from current age
Time_to_CD <- CD_age - age  #Time to clinical detection
#triple While loop condition check if abosrbing death,
#screen_detected or interval ca event has occured
#update age at the end of each iteration
while ((age < Mort_age) && (interval_ca == 0) && (screen_detected_ca == 0)){
#events pre-diagnosis
Event_list <- c(Time_to_screen,Time_to_death,Time_to_CD)
Event_place <- which.min(Event_list) # pick the nearest event in time
Next_event_time <- Event_list[Event_place] # the time to nearest event
current_discount<-(1/((1+discount_cost)^(Next_event_time+age-screen_startage)))
#Open screening event
if(Event_place == 1){
if (screen_count==0 & missed_screen==0 & dqrunif(1,0,1)>uptakefirstscreen |
screen_count==0 & missed_screen>0 & dqrunif(1,0,1)>uptakenoscreen|
screen_count>0 & dqrunif(1,0,1)>uptakeotherscreen) {missed_screen<-missed_screen+1}else{
screen_count<-screen_count+1
costs<-costs+(cost_screen*current_discount)
if(screen_count==1 & screen_strategy<3 & risk_data$risk_predicted==1){costs<-costs+(cost_strat*current_discount)}
if(screen_count==1 & screen_strategy==7 & risk_data$risk_predicted==1){costs<-costs+(cost_strat*current_discount)}
if(screen_count==1 & screen_strategy==8 & risk_data$risk_predicted==1){costs<-costs+(cost_strat*current_discount)}
if(screen_count==1 & screen_strategy==9 & risk_data$risk_predicted==1){costs<-costs+(cost_strat*current_discount)}
if(screen_count == length(screen_times)){lastscreen_count <- 1}
if(risk_data$US_screen == 1){US_count <- US_count + 1
costs <- costs + (cost_US*current_discount)
US_costs<-US_costs+(cost_US*current_discount)}
if(risk_data$MRI_screen == 1){MRI_count <- MRI_count + 1
costs <- costs + (cost_MRI*current_discount)
MRI_costs <- MRI_costs + (cost_MRI*current_discount)}
#If the next event is a screen:
if (Event_place == 1 && ca_case ==1){
#Determine if tumour is present
t <- (age+Next_event_time) - gen_age
if (t>0){
#Determine size of tumour
Ca_size <- Vm/(1+((Vm/Vc)^0.25-1)*exp(-0.25*grow_rate_i*t))^4 #tumour volume at time t
Ca_size <- 2*(Ca_size/(4/3*pi))^(1/3)
#Determine if screening detects the cancer
screen_result <- cmp_screening_result(Ca_size,VDG=risk_data$VDG,MRI_screening = risk_data$MRI_screen,US_screening=risk_data$US_screen)
#If a cancer is detected add a cancer and details to the counters
if(screen_result[1] == 1){
screen_detected_ca <-1
cancer_diagnostic[1] <- c((age+Time_to_screen))
cancer_diagnostic[3] <- c(Ca_size)
cancer_diagnostic[4] <- c(1)
cancer_diagnostic[5] <- c(screen_result[4])
cancer_diagnostic[6] <- c(screen_result[3])
cancer_diagnostic[10] <- c(screen_count)
incidence_age_record = age+Time_to_screen
costs = costs + (cost_follow_up*current_discount)
costs_follow_up = costs_follow_up + (cost_follow_up*current_discount)
}
if(screen_result[1] == 1 && screen_count == 1){sdfirst_cancer <-1} #ca detected in first screen
if(screen_result[1] == 1 && screen_count == length(screen_times)){sdlast_cancer <-1} #ca detected on last screen
} else{screen_detected_ca <- 0}
} else{screen_detected_ca <- 0}
#Does a false-positive occur?
if(Event_place == 1 && screen_detected_ca == 0 && dqrunif(1,0,1)<recall_rate){
recall_count <- recall_count+1
costs=costs+(cost_follow_up*current_discount)+(biopsy_rate*cost_biop*current_discount)
costs_follow_up=costs_follow_up+(costs_follow_up*current_discount)+(biopsy_rate*cost_biop*current_discount)}
}} #End screening event
#Clinical cancer diagnosis event
if(Event_place == 3){
interval_ca <-1
incidence_age_record = age+Time_to_CD
costs <- costs + (cost_follow_up*current_discount)
cancer_diagnostic[1] <- c((age+Time_to_CD))
cancer_diagnostic[3] <- c(CD_size)
}
#Cancer detected clinically or by screening
if(screen_detected_ca == 1 || interval_ca == 1){
age <- age + Next_event_time
if(interval_ca == 1){Ca_size <- CD_size}
#Assign a Stage based on tumour size
stage_cat <- cmp_stage_by_size(Ca_size)
if(stage_cat == 1){stage1_counter = stage1_counter+1}
if(stage_cat == 2){stage2_counter = stage2_counter+1}
if(stage_cat == 3){stage3_counter = stage3_counter+1}
if(stage_cat == 4){stage4_counter = stage4_counter+1}
if(stage_cat == 5){DCIS_counter = DCIS_counter+1
costs = costs + (cost_DCIS*current_discount)}
#Generate a cancer specific survival time, accounting for competing risks
Ca_mort_age <- cmp_ca_survival_time(stage_cat,Mort_age,age,ca_incidence_age)
if(Ca_mort_age<Mort_age){Mort_age<-Ca_mort_age}
if(stage_cat<3){iStage<-"Early"} else {iStage<-"Late"}
if(age<65){iAge<-"18.64"} else {iAge<-"65plus"}
if(PSA==0){
if(stage_cat <5){costs<-costs+(as.numeric(fnLookupBase(iStage,iAge,min(c(round(Mort_age-age),50)))*current_discount))}
} else {
if(stage_cat <5){costs<-costs+((1+risk_data$PSA_costvar)*as.numeric(fnLookupBase(iStage,iAge,min(c(round(Mort_age-age),50)))*current_discount))}
}
cancer_diagnostic[9] <- c(Mort_age)
cancer_diagnostic[2] <- c(stage_cat)
}else{age <- age + Next_event_time #update age if no cancer
}
#update times for next event
if(screen_count+missed_screen < length(screen_times)){Time_to_screen <- screen_times[screen_count+1] - age}else{Time_to_screen <- 101} #when screen times runs out set time to age 101
Time_to_death <- Mort_age - age
Time_to_CD <- CD_age - age
} #while1 end
if((screen_detected_ca+interval_ca) == 0){cancer_diagnostic[1] <- Mort_age} # recorded age is age of death or cancer incidence
#all ca/screen counters
screen_detected_count <- screen_detected_count + screen_detected_ca
screen_counter <- screen_counter + screen_count
US_counter <- US_counter + US_count
MRI_counter <- MRI_counter + MRI_count
#FP recalls
recall_counter <- recall_counter + recall_count
#first screen detected ca counter
sdfirst_counter <- sdfirst_counter + sdfirst_cancer
#last ca/screen counters
sdlast_counter <- sdlast_counter + sdlast_cancer
lastscreen_counter <- lastscreen_counter + lastscreen_count
#Life-year counter
LY_counter <- LY_counter + (Mort_age-start_age)
#QALY counter
QALY_length <- ceiling(Mort_age)-(screen_startage-1)
if(QALY_length<1){QALY_length <-1}
if(QALY_length>time_horizon-screen_startage){QALY_length <-time_horizon-screen_startage}
QALY_vect <- rep(0,QALY_length)
for (y in 1:length(QALY_vect)){
QALY_vect[y] <- (utility_ages[match((ceiling(((screen_startage-1)+y)/5)*5),utility_ages[,1]),2])*(1/(1+discount_health)^y)
QALY_vect[QALY_length]<-QALY_vect[QALY_length]*(1-(ceiling(Mort_age)-Mort_age))
}
if (incidence_age_record > 0){
QALY_vect[floor(incidence_age_record)-screen_startage] <- utility_stage_cat_y1[stage_cat]*QALY_vect[floor(incidence_age_record)-screen_startage]*(1-(incidence_age_record-floor(incidence_age_record)))}
if(incidence_age_record>0 & Mort_age-incidence_age_record>1){
QALY_vect[(floor(incidence_age_record)-screen_startage)+1]<-(utility_stage_cat_y1[stage_cat]*QALY_vect[(floor(incidence_age_record)-screen_startage)+1]*(incidence_age_record-floor(incidence_age_record)))+
(utility_stage_cat_follow[stage_cat]*QALY_vect[(floor(incidence_age_record)-screen_startage)+1]*(1-(incidence_age_record-floor(incidence_age_record))))}
if(incidence_age_record > 0 && ceiling(if(Mort_age<100){Mort_age}else{100}) > incidence_age_record+2){
for (y in (incidence_age_record+2):min((incidence_age_record+8),ceiling(if(Mort_age<100){Mort_age}else{100}))){
QALY_vect[y-screen_startage] <- QALY_vect[y-screen_startage]*utility_stage_cat_follow[stage_cat]
}
}
QALY_counter <- QALY_counter + sum(QALY_vect,na.rm = TRUE)
} #end j loop
#c(LY_counter, QALY_counter, costs, screen_counter, (screen_detected_ca+interval_ca), cancer_diagnostic, c(risk_data[15:34]), screen_strategy)
if(PSA==0){
c(QALY_counter, costs, screen_counter,cancer_diagnostic[8],(screen_detected_ca+interval_ca),screen_detected_ca, screen_strategy,risk_data$growth_rate,LY_counter-(screen_startage-start_age),cancer_diagnostic)}else{
as.numeric(c(QALY_counter, costs, screen_counter,cancer_diagnostic[8],(screen_detected_ca+interval_ca),screen_detected_ca,screen_strategy,risk_data$growth_rate,LY_counter-(screen_startage-start_age), c(risk_data[15:40])))
}
}
results <- data.frame(results)
names(results)[1] <- 'QALY'
names(results)[2] <- 'Cost'
names(results)[3] <- 'Screens'
names(results)[4] <- "Cancer Diagnosed Age"
names(results)[5] <- "Cancer"
names(results)[6] <- "screen detected"
names(results)[7] <-"alternative"
names(results)[8] <- "Growth rate"
names(results)[9] <- "Life Years"
if(PSA==1){
names(results)[10:35]<-c("PSA_gamma_survival_1","PSA_gamma_survival_2","PSA_gamma_survival_3",
"PSA_meta_survival_54","PSA_meta_survival_74","PSA_meta_survival_99",
"PSA_beta_1","PSA_beta_2",'PSA_VDG1_sen','PSA_VDG2_sen',
'PSA_VDG3_sen', 'PSA_VDG4_sen',"PSA_MRI_cdr","PSA_US_cdr",
"PSA_log_norm_mean","PSA_log_norm_sd","PSA_cost_strat","PSA_costvar",
"PSA_util_1to3","PSA_util_4","PSA_costscreen","PSA_cost_follow_up",
"PSA_cost_biop","PSA_cost_US","PSA_cost_MRI","mcid")
}
#directory to save inum/10 sets of case histories and name of files
if(PSA==0){
save(results,file = paste("Deterministic results/Determ_",screen_strategy,"_",ii,".Rdata",sep = ""))}else{
save(results,file = paste("PSA results/PSA_",screen_strategy,"_",ii,".Rdata",sep = ""))
}
print(paste(ii*10,"%"))
} #End 1 million simulation loop
#results #see result if parellel version
#save results
#see results
merged_result <- matrix(0,nrow = chunks,ncol = 7)
if(PSA==0){
for (i in 1:chunks){
#name of saved files needed
load(paste("Deterministic results/Determ_",screen_strategy,"_",i,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
merged_result[i,1] <- mean(results[,1])
merged_result[i,2] <- mean(results[,2])
merged_result[i,3] <- mean(results[,3])
merged_result[i,4] <- mean(results[,5])
merged_result[i,5] <- mean(results[,6])
merged_result[i,6] <- mean(results[,7])
merged_result[i,7] <- mean(results[,9])
}
write.csv(merged_result,file = paste("Detresults_strat_",screen_strategy,".csv"))}else{
for (i in 1:chunks){
#name of saved files needed
load(paste("PSA results/PSA_",screen_strategy,"_",i,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
merged_result[i,1] <- mean(results[,1])
merged_result[i,2] <- mean(results[,2])
merged_result[i,3] <- mean(results[,3])
merged_result[i,4] <- mean(results[,5])
merged_result[i,5] <- mean(results[,6])
merged_result[i,6] <- mean(results[,7])
merged_result[i,7] <- mean(results[,9])
}
write.csv(merged_result,file = paste("PSAresults_strat_",screen_strategy,".csv"))
}
rm(list=ls())
output_df <- data.frame(matrix(nrow=6,ncol=4))
screen_strategies<-c(0,1,2,3,4,9)
for (j in 1:6){
screen_strategy<-screen_strategies[j]
load(paste("Deterministic results/Determ_",screen_strategy,"_",1,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
results<-results[-c(4:8)]
results<-results[-c(5:14)]
detresults<-results
for (i in 2:10){
#name of saved files needed
load(paste("Deterministic results/Determ_",screen_strategy,"_",i,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
results<-results[-c(4:8)]
results<-results[-c(5:14)]
detresults<-rbind(detresults,results)
}
output_df[j,]<-c(mean(detresults[,1]),mean(detresults[,2]),mean(detresults[,3]),mean(detresults[,4]))
}
strategies<-c("noscreening","PROCAS","Tertiles","3 year","2 year","PROCAS full")
rownames(output_df) <- strategies
colnames(output_df)<-c("qaly","cost","screens","life years")
output_df[,"incQALYS"]<-c(output_df$qaly-output_df$qaly[1])
output_df[,"incCost"]<-c(output_df$cost-output_df$cost[1])
output_df[,"ICER"]<-c(output_df$incCost/output_df$incQALYS)
output_df[,"NB20k"]<-c((output_df$incQALYS*20000)-output_df$incCost)
output_df[,"NB30k"]<-c((output_df$incQALYS*30000)-output_df$incCost)
icer_strat<-calculate_icers(cost=output_df$cost,
effect=output_df$qaly,
strategies = c(row.names(output_df)))
plot(icer_strat,currency="£",label="all")
plot(icer_strat,currency="£",label="all")
fnIncCU <- function(Names, Costs, QALYs , blnNHB=TRUE, WTP=c(20000,30000), blnCUP=TRUE, costDP = 2, qalyDP = 5, icerDP = 2) {
nn <- NROW(Names)
IncCU <- tibble(StratName  = Names,
Cost       = Costs,
QALY       = QALYs,
dom        = FALSE,
extdom     = FALSE,
comp       = 1,
IncCost    = 0,
IncQALY    = 0,
ICER       = 0,
strICER    = "-",
strIncCost = "-",
strIncQALY = "-",
strCost    = format(round(Cost, costDP), nsmall = costDP, big.mark=","),
strQALY    = format(round(QALY, qalyDP), nsmall = qalyDP, big.mark=",")) %>%
arrange(Cost) %>%
mutate(ID = row_number())
for (i in 2:nn) {
comp <- max(which(!IncCU$dom[1:(i-1)] & !IncCU$extdom[1:(i-1)]))
IncCU$comp[i]       <- comp
IncCU$IncCost[i]    <- IncCU$Cost[i]-IncCU$Cost[comp]
IncCU$IncQALY[i]    <- IncCU$QALY[i]-IncCU$QALY[comp]
IncCU$ICER[i]       <- IncCU$IncCost[i] / IncCU$IncQALY[i]
IncCU$dom[i]        <- max(IncCU$QALY[1:(i-1)]) > IncCU$QALY[i]
IncCU$extdom[i]     <- if (i==nn) FALSE else any(IncCU$QALY[(i+1):nn]>IncCU$QALY[i] & (IncCU$Cost[(i+1):nn]-IncCU$Cost[comp])/(IncCU$QALY[(i+1):nn]-IncCU$QALY[comp]) < IncCU$ICER[i])
IncCU$strICER[i]    <- ifelse(IncCU$dom[i], "dominated", ifelse(IncCU$extdom[i], "extendedly dominated", format(round(IncCU$ICER[i], icerDP), nsmall = icerDP, big.mark=",")))
IncCU$strIncCost[i] <- format(round(IncCU$IncCost[i], costDP), nsmall = costDP, big.mark=",")
IncCU$strIncQALY[i] <- format(round(IncCU$IncQALY[i], qalyDP), nsmall = qalyDP, big.mark=",")
}
if (blnNHB) {
IncCU %<>%
rowwise() %>%
mutate(NHB = map2(Cost, QALY, ~ (QALY - Cost / WTP) %>%
setNames(paste0("NHB", WTP)))) %>%
unnest_wider(NHB) %>%
mutate(across(starts_with("NHB"), ~ rank(desc(.x)), .names = "rank{.col}"))
}
if (blnCUP) {
or.x <- IncCU$QALY[which(IncCU$Cost==min(IncCU$Cost))]
or.y <- min(IncCU$Cost)
ax.x <- fnAxisScale(min(IncCU$QALY), max(IncCU$QALY))
ax.y <- fnAxisScale(or.y, max(IncCU$Cost))
tl.x <- (ax.x$dMax - ax.x$dMin) / 50
tl.y <- (ax.y$dMax - ax.y$dMin) / 50
nt.x <- ((ax.x$dMax - ax.x$dMin) / ax.x$dMajor + 1) %>% round(0)
nt.y <- ((ax.y$dMax - ax.y$dMin) / ax.y$dMajor + 1) %>% round(0)
tblXT <- tibble(x  = ax.x$dMin + (1:nt.x-1)*ax.x$dMajor,
y1 = or.y - tl.y/2,
y2 = or.y + tl.y/2)
tblYT <- tibble(y  = ax.y$dMin + (1:nt.y-1)*ax.y$dMajor,
x1 = or.x - tl.x/2,
x2 = or.x + tl.x/2)
plt <- IncCU %>%
ggplot(aes(x=QALY, y=Cost)) +
geom_abline(slope     = WTP[1],
intercept = seq(ax.y$dMin - ax.y$dMajor * 100,
ax.y$dMax + ax.y$dMajor * 100,
ax.y$dMajor) - or.x * WTP[1],
colour    = "white",
lty       = 5,
linewidth      = 1) +
geom_hline(yintercept = or.y,
linewidth       = 1.25) +
geom_segment(data = tblXT,
aes(x    = x,
xend = x,
y    = y1,
yend = y2),
linewidth = 1.25) +
geom_vline(xintercept = or.x, linewidth = 1.25) +
geom_segment(data = tblYT,
aes(y    = y,
yend = y,
x    = x1,
xend = x2),
linewidth = 1.25) +
geom_line(data = IncCU %>%
filter(str_detect(strICER, "dominated", negate = T)),
aes(x = QALY,
y = Cost),
colour = "red", linewidth = 1.25) +
geom_point(shape = 19, colour = "darkgreen", size = 10) +
geom_text(aes(label = ID),
colour = "white", size = 12 * 1/72 * 25.4) +
scale_x_continuous(limits = c(ax.x$dMin, ax.x$dMax*1.000000001),
breaks = seq(ax.x$dMin, ax.x$dMax, ax.x$dMajor),
labels = seq(ax.x$dMin, ax.x$dMax, ax.x$dMajor),
name   = "QALYs") +
scale_y_continuous(limits = c(ax.y$dMin, ax.y$dMax*1.000000001),
breaks = seq(ax.y$dMin, ax.y$dMax, ax.y$dMajor),
labels = scales::number_format(prefix = "£",
big.mark = ","),
name   = "Costs\n") +
theme(panel.background = element_rect(fill = "grey75"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text        = element_text(size = 12),
axis.title       = element_text(size = 12, face = "bold"),
axis.ticks       = element_blank())
} else plt <- NULL
prettyIncCU <- IncCU %>%
select(ID,
StratName,
strCost,
strQALY,
strIncCost,
strIncQALY,
strICER,
contains("NHB")) %>%
gt() %>%
cols_label(
StratName  = "Strategy",
strCost    = "Costs\n(£)",
strQALY    = "Effects\n(QALYs)",
strIncCost = "Costs\n(£)",
strIncQALY = "Effects\n(QALYs)",
strICER    = "ICER\n(£/QALY)") %>%
cols_label_with(
starts_with("NHB"), ~ paste0("£", as.numeric(str_sub(.x, 4))/1000, "K/QALY")) %>%
cols_label_with(
starts_with("rankNHB"), ~ paste0("£", as.numeric(str_sub(.x, 8))/1000, "K/QALY")) %>%
tab_spanner(label = "Incremental",
columns = c(strIncCost, strIncQALY, strICER)) %>%
tab_spanner(label = "Net health benefit",
columns = starts_with("NHB")) %>%
tab_spanner(label = "Rank",
columns = starts_with("rankNHB")) %>%
cols_align(align = "center",
columns = -c(StratName)) %>%
opt_horizontal_padding(scale = 2) %>%
opt_table_font(font = "Arial")
return(list(IncCU       = IncCU,
prettyIncCU = prettyIncCU,
CUplane     = plt))
}
fnAxisScale <- function(dMin, dMax) {
## adapted from some VBA of Jon Peltier's
## https://peltiertech.com/calculate-nice-axis-scales-in-excel-vba/
if (dMax == dMin) {
dTemp = dMax
dMax = dMax * 1.01
dMin = dMin * 0.99
}
if (dMax < dMin) {
dTemp = dMax
dMax = dMin
dMin = dTemp
}
if (dMax != 0) {
if (dMax > 0) {
dMax = dMax + (dMax - dMin) * 0.01
}
else {
dMax = min(dMax + (dMax - dMin) * 0.01, 0)
}
}
if (dMin != 0) {
if (dMin > 0) {
dMin = max(dMin - (dMax - dMin) * 0.01, 0)
}
else {
dMin = dMin - (dMax - dMin) * 0.01
}
}
if (dMax == 0 & dMin == 0) dMax = 1
dPower = log(dMax - dMin) / log(10)
dScale = 10 ^ (dPower - trunc(dPower))
dScale <- case_when(
between(dScale, 0, 2.5) ~ 0.2,
between(dScale, 2.5, 5) ~ 0.5,
between(dScale, 5, 7.5) ~ 1,
TRUE                    ~ 2,
)
dSmall <- case_when(
between(dScale, 0, 2.5) ~ 0.05,
between(dScale, 2.5, 5) ~ 0.1,
between(dScale, 5, 7.5) ~ 0.2,
TRUE                    ~ 0.5,
)
dScale = dScale * 10 ^ trunc(dPower)
dSmall = dSmall * 10 ^ trunc(dPower)
list (dMin = dScale * trunc(dMin / dScale),
dMax = dScale * (trunc(dMax / dScale) + 1),
dMajor = dScale,
dMinor = dSmall)
}
IncCU <- fnIncCU(Names=rownames(output_df), Costs=output_df$cost, QALYs=output_df$qaly)
IncCU$prettyIncCU
plot(icer_strat,currency="£",label="all")
plot(icer_strat,currency="£")
plot(icer_strat,currency="£", label="all")
IncCU$prettyIncCU
View(results)
View(results)
View(output_df)
View(output_df)
