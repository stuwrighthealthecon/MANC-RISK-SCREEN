filter(Yr==1) %>%
mutate(across(c(Yr, pred, DCost.p), ~0)) %>%
bind_rows(tblPred) %>%
group_by(Stage, Age) %>%
mutate(DCost.p.i    = DCost.p * 1.219312579, # NHSCII inflator for 2010/11-->2020/21
disc         = 1/1.035^(Yr-0.5),
DCost.p.i.d  = DCost.p.i * disc,
CDCost.p.i.d = cumsum(DCost.p.i.d),
StageEarly   = Stage=="Early",
AgeYoung     = Age=="18.64") %>%
arrange(Stage, Age, Yr) %>%
ungroup()
##########False Positive and Overdiagnosis parameters################
recall_rate <- 0.0456 #UK recall rate
biopsy_rate <- 0.024 #Proporiton of referrals without cancer that have biopsy
#######################Utility Weights#########################################
#Set age adjusted utility values
utility_ages<-data.frame(c(30,35,40,45,50,55,60,65,70,75,80,85,90,95,100),
c(0.9383,0.9145,0.9069,0.8824,0.8639,0.8344,0.8222,0.8072,0.8041,0.779,0.7533,0.6985,0.6497,0.6497,0.6497))
#Set time independent utility decrements
#Utility of DCIS
utility_DCIS <- 1 #assumes no effect
#Set first year cancer utilities:
utility_stage_cat_y1 <- c("stage1"=0.82/0.822,
"stage2"=0.82/0.822,
"stage3"=0.75/0.822,
"Metastatic"=0.75/0.822,
"DCIS"=utility_DCIS)
#Set following year cancer utilities:
utility_stage_cat_follow <- c("stage1"=0.82/0.822,
"stage2"=0.82/0.822,
"stage3"=0.75/0.822,
"Metastatic"=0.75/0.822,
"DCIS"=utility_DCIS)
#########################CREATE SAMPLE OF WOMEN FOR MODEL###################
if(gensample==1){create_sample(PSA,intervals,seed)}
################Outer Individual sampling loop##############################
#Set loop to divide i loop into a number of sub-loops in case of simulation break
for (ii in 1:chunks) {
load(paste("Risksample/risksample_",ii,".Rdata",sep = ""))
prefix<-paste("^","X",ii,".",sep="")
names(splitsample)<-sub(prefix,"",names(splitsample))
#Assign women to risk groups based on 10yr risk if using risk-stratified approach
if(screen_strategy==1 | screen_strategy==9) {
splitsample$risk_group<-1+findInterval(splitsample$tenyrrisk,risk_cutoffs_procas)
} else
if(screen_strategy==2) {
splitsample$risk_group<-1+findInterval(splitsample$tenyrrisk,risk_cutoffs_tert)
} else
if(screen_strategy==7 | screen_strategy==8) {
splitsample$risk_group<-ifelse(splitsample$tenyrrisk<low_risk_cut,1,2)
}
#Assign women to supplemental screening if switched on and criteria met
if(supplemental_screening==1){
for (i in 1:length(splitsample$MRI_screen)) {
if(splitsample[i,"VDG"]>=density_cutoff & splitsample[i,"tenyearrisk"]>=8){splitsample[i,"MRI_screen"]<1}else
if(splitsample[i,"VDG"]>=density_cutoff & splitsample[i,"tenyearrisk"]<8){splitsample[i,"US_screen"]<-1}}}
#If risk-stratified screening used then determine if each woman chooses to have
#risk predicted, attends risk consultation, and changes interval
if(screen_strategy==1 | screen_strategy==2 | (screen_strategy>6 & screen_strategy<10)){
splitsample$risk_predicted<-ifelse(dqrunif(
length(splitsample$risk_predicted),0,1)<
c(rep(risk_uptake,length(splitsample$risk_predicted))),1,0)
splitsample$feedback<-ifelse(splitsample$risk_predicted==1 &
dqrunif(length(splitsample$feedback),0,1)<
c(rep(risk_feedback)),1,0)
splitsample$interval_change<-ifelse(splitsample$feedback==1 &
dqrunif(length(splitsample$interval_change),0,1)<
c(rep(screen_change)),1,0)
}
#Create iterator for the data.frame of women to pass to parallel processors
itx<-iter(splitsample,by="row")
#Set counters for individual sampling loop
total_screens <- 0
total_cancers_detected <- 0
total_costs <- 0
total_US_costs <- 0
total_MRI_costs <- 0
total_life_years <- 0
total_US <- 0
total_MRI <- 0
total_QALYs <- 0
total_costs_follow_up <- 0
#Open i loop: Simulating individual women through the strategy
results <- foreach(i=itx,.combine = 'rbind',.packages = c('MASS','dqrng','tidyverse')) %dopar% {
#Set up record of age, size, mode of detection of each detected cancer
cancer_diagnostic <- rep(0,10)
#Select an individual woman from the data.frame
risk_data<-as.data.frame(i)
#If PSA switched on, replace base case parameter values with Monte Carlo draws
if(PSA==1){
beta1<-risk_data$PSA_beta_1
beta2<-risk_data$PSA_beta_2
log_norm_mean<-risk_data$PSA_log_norm_mean
log_norm_sd<-risk_data$PSA_log_norm_sd
gamma_survival_1<-exp(risk_data$PSA_gamma_survival_1)
gamma_survival_2<-exp(risk_data$PSA_gamma_survival_2)
gamma_survival_3<-exp(risk_data$PSA_gamma_survival_3)
gamma_stage <- c(gamma_survival_1,gamma_survival_2,gamma_survival_3)
meta_survival_54 <- exp(risk_data$PSA_meta_survival_54)
meta_survival_74 <- exp(risk_data$PSA_meta_survival_74)
meta_survival_99 <- exp(risk_data$PSA_meta_survival_99)
metastatic_survival <- c(meta_survival_54, meta_survival_74, meta_survival_99)
Sen_VDG<-c(risk_data$PSA_VDG1_sen,risk_data$PSA_VDG2_sen,
risk_data$PSA_VDG3_sen,risk_data$PSA_VDG4_sen)
Sen_VDG_av<-mean(Sen_VDG)
MRI_cdr<-risk_data$PSA_MRI_cdr
US_cdr<-risk_data$PSA_US_cdr
risk_data$growth_rate<-risk_data$cancer*qlnorm(dqrunif(1,0,1),
meanlog=log_norm_mean,
sdlog=sqrt(log_norm_sd))
utility_stage_cat_y1 <- c("stage1"=risk_data$PSA_util_1to3/0.822,
"stage2"=risk_data$PSA_util_1to3/0.822,
"stage3"=risk_data$PSA_util_1to3/0.822,
"Metastatic"=risk_data$PSA_util_4/0.822,
"DCIS"=utility_DCIS)
utility_stage_cat_follow <- c("stage1"=risk_data$PSA_util_1to3/0.822,
"stage2"=risk_data$PSA_util_1to3/0.822,
"stage3"=risk_data$PSA_util_1to3/0.822,
"Metastatic"=risk_data$PSA_util_4/0.822,
"DCIS"=utility_DCIS)
cost_strat<-risk_data$PSA_cost_strat
cost_DCIS<-cost_DCIS_base*(1+risk_data$PSA_costvar)
cost_screen<-cost_screen_base*(1+risk_data$PSA_costscreen)
cost_follow_up <- cost_follow_up_base*(1+risk_data$PSA_cost_follow_up)
cost_biop <- cost_biop_base*(1+risk_data$PSA_cost_biop)
cost_US <- cost_US_base*(1+risk_data$PSA_cost_US)
cost_MRI <-cost_MRI_base*(1+risk_data$PSA_cost_MRI)
}
############################## Set Screen times###############################
#Assign screening intervals based on strategy and risk group
screen_times <- c(999)
if (screen_strategy==1 & risk_data$interval_change==1) {
if (risk_data$risk_group<4) {screen_times<-low_risk_screentimes} else
if (risk_data$risk_group>3 & risk_data$risk_group<5) {screen_times<-med_risk_screentimes} else
if (risk_data$risk_group>4) {screen_times<-high_risk_screentimes}
} else if(screen_strategy==1 & risk_data$interval_change==0) {screen_times<-low_risk_screentimes}
if(screen_strategy==2 & risk_data$interval_change==1){
if(risk_data$risk_group==1){screen_times<-low_risk_screentimes} else
if(risk_data$risk_group==2){screen_times<-med_risk_screentimes} else
if(risk_data$risk_group==3){screen_times<-high_risk_screentimes}
} else if(screen_strategy==1 & risk_data$interval_change==0) {screen_times<-low_risk_screentimes}
if(screen_strategy==3){
screen_times <- low_risk_screentimes
}
if(screen_strategy==4){
screen_times <- med_risk_screentimes
}
if(screen_strategy==5){
screen_times <- seq(screen_startage, screen_startage+(5*4),5)
}
if(screen_strategy==6){
screen_times <- seq(screen_startage, screen_startage+10,10)
}
if(screen_strategy==7 & risk_data$interval_change==1){
if(risk_data$risk_group==1){screen_times<-seq(screen_startage, screen_startage+(5*4),5)}
if(risk_data$risk_group==2){screen_times<-low_risk_screentimes}
} else if(screen_strategy==7 & risk_data$interval_change==0) {screen_times<-low_risk_screentimes}
if(screen_strategy==8 & risk_data$interval_change==1){
if(risk_data$risk_group==1){screen_times<-seq(screen_startage,screen_startage+(6*3),6)}
if(risk_data$risk_group==2){screen_times<-low_risk_screentimes}
} else if (screen_strategy==8 & risk_data$interval_change==0) {screen_times<-low_risk_screentimes}
if(screen_strategy==9 & risk_data$interval_change==1){
if (risk_data$risk_group==1) {screen_times<-seq(screen_startage, screen_startage+(5*4),5)} else
if (risk_data$risk_group==2 | risk_data$risk_group==3) {screen_times<-low_risk_screentimes} else
if (risk_data$risk_group==4) {screen_times<-med_risk_screentimes} else
if (risk_data$risk_group==5) {screen_times<-high_risk_screentimes}
} else if(screen_strategy==9 & risk_data$interval_change==0) {screen_times<-low_risk_screentimes}
##########################Set counters at i loop level#########################
#screen-detected cancer counts
screen_detected_count <- 0 #Cancer detected by screening
sdfirst_counter <- 0 #Cancer found at first screen
sdlast_counter <-0 #Cancer found at last screen
#Count of screens
screen_counter <- 0 #Number of Screens
lastscreen_counter <-0 #Last screen attended
US_counter <- 0 #Number of ultrasounds
MRI_counter <- 0 #Number of MRIs
#Recall count
recall_counter <- 0 #Number of recalls
#Total cost
cost_counter <- 0 #Total costs
#Total life years
LY_counter <- 0 #Total life years
#Total QALYs
QALY_counter <- 0 #Total QALYs
#Cancer stage counters
stage1_counter <- 0 #Stage 1 cancer found
stage2_counter <- 0 #Stage 2 cancer found
stage3_counter <- 0 #Stage 3 cancer found
stage4_counter <- 0 #Stage 4 cancer found
DCIS_counter <- 0 #DCIS found
#######J loop for individual experience of breast cancer screening##########
for (j in jnum){
#Set J level counters
screen_count <- 0 #Screens attended
missed_screen<- 0 #Screens missed
recall_count <- 0 #Number of recalls
sdlast_cancer <-0 #Cancer detected as last screen
lastscreen_count <- 0 #Attended last screen
sdfirst_cancer <- 0 #Cancer detected at first screen
stage_cat <- 0 #Stage of diagnosed cancer
MRI_count <- 0 #Number of MRIS
US_count <- 0 #Number of Ultrasounds
incidence_age_record <- 0 #Age of cancer incidence
costs <- 0 #Total costs
US_costs <- 0 #Ultrasound costs
MRI_costs <- 0 #MRI costs
costs_follow_up <- 0 #Follow up costs
#Lifetime cancer incidence
#Determines if a cancer occurs and at what age
if (risk_data$cancer==1){
ca_case<-1
#Determine cancer growth rate
grow_rate_i<-risk_data$growth_rate
#Determine when the cancer would be clinically diagnosed
ca_incidence_i <- cmp_incidence_function()
ca_incidence_age <- ca_incidence_i[1]
#Determine size at clinical detection age
CD_size <- ca_incidence_i[4]#tumour diameter at CD
#The detection age is either the age at clinical detection
#or a formula is applied to determine the age at screen
#detection
if(ca_incidence_i[2] ==1){CD_age <- ca_incidence_i[1]} else
CD_age <- ca_incidence_i[1] + ((log((Vm/Vc)^0.25-1)-
log((Vm/((4/3)*pi*(ca_incidence_i[4]/2)^3))^0.25-1))/(0.25*grow_rate_i)) -
((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(ca_incidence_i[3]/2)^3))^0.25-1))/(0.25*grow_rate_i))
cancer_diagnostic[8] <- c(CD_age)
#Calculate tumour genesis age
t_gen <- ((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(CD_size/2)^3))^0.25-1))/(0.25*grow_rate_i)) #Calculate time to get to clinical detection size
gen_age <- CD_age - t_gen
} else {
ca_case <- 0
ca_incidence_age <- 999 #Redundant but ensures after end of simulation if called
CD_age <- 999 #Redundant but ensures after end of simulation if called
}
#Get an all-cause mortality age and make sure this is greater than start
#age and cancer incidence age
Mort_age <- risk_data$life_expectancy
#If cancer occurs after age of death, re-draw age of death
if(ca_case == 1 & Mort_age <= ca_incidence_age){Mort_age <-qweibull(
p = dqrunif(n = 1,min = pweibull(
q = CD_age,shape = acmmortality_wb_a,scale = acmmortality_wb_b),max = 1),
shape = acmmortality_wb_a, scale = acmmortality_wb_b)}
if(Mort_age >= time_horizon){Mort_age <- 99.99}
cancer_diagnostic[7] <- c(Mort_age)
#Other individual variables
age <- start_age
interval_ca <- 0 #Cancer clinically detected
screen_detected_ca <- 0 #Cancer screen detected
##############################DES COMPONENT ###################################
Time_to_screen <- screen_times[1] - age #Select the current next screen age and subtract age
Time_to_death <- Mort_age - age #Time to death from current age
Time_to_CD <- CD_age - age  #Time to clinical detection
#Triple While loop condition check if absorbing death, screen_detected or
#interval ca event has occurred. Update age at the end of each iteration
while ((age < Mort_age) && (interval_ca == 0) && (screen_detected_ca == 0)){
#Events pre-diagnosis
Event_list <- c(Time_to_screen,Time_to_death,Time_to_CD)
Event_place <- which.min(Event_list) #Pick the nearest event in time
Next_event_time <- Event_list[Event_place] #The time to nearest event
#Calculate current discount rate
current_discount<-(1/((1+discount_cost)^(Next_event_time+age-screen_startage)))
#Open screening event
if(Event_place == 1){
#Check if woman attends screen
if (screen_count==0 & missed_screen==0 & dqrunif(1,0,1)>uptakefirstscreen |
screen_count==0 & missed_screen>0 & dqrunif(1,0,1)>uptakenoscreen|
screen_count>0 & dqrunif(1,0,1)>uptakeotherscreen) {missed_screen<-missed_screen+1}else{
#Woman attends screen
screen_count<-screen_count+1
#Add cost of a mammography and risk prediction if first screen for relevant strategies
costs<-costs+(cost_screen*current_discount)
if(screen_count==1 & screen_strategy<3 & risk_data$risk_predicted==1){costs<-costs+(cost_strat*current_discount)}
if(screen_count==1 & screen_strategy==7 & risk_data$risk_predicted==1){costs<-costs+(cost_strat*current_discount)}
if(screen_count==1 & screen_strategy==8 & risk_data$risk_predicted==1){costs<-costs+(cost_strat*current_discount)}
if(screen_count==1 & screen_strategy==9 & risk_data$risk_predicted==1){costs<-costs+(cost_strat*current_discount)}
if(screen_count == length(screen_times)){lastscreen_count <- 1}
#Add costs of supplemental screening if relevant
if(risk_data$US_screen == 1){US_count <- US_count + 1
costs <- costs + (cost_US*current_discount)
US_costs<-US_costs+(cost_US*current_discount)}
if(risk_data$MRI_screen == 1){MRI_count <- MRI_count + 1
costs <- costs + (cost_MRI*current_discount)
MRI_costs <- MRI_costs + (cost_MRI*current_discount)}
#If the next event is a screen and a cancer is present:
if (Event_place == 1 && ca_case ==1){
#Determine if tumour is present at screen
t <- (age+Next_event_time) - gen_age
if (t>0){
#Determine size of tumour
Ca_size <- Vm/(1+((Vm/Vc)^0.25-1)*exp(-0.25*grow_rate_i*t))^4 #tumour volume at time t
Ca_size <- 2*(Ca_size/(4/3*pi))^(1/3)
#Determine if screening detects the cancer
screen_result <- cmp_screening_result(Ca_size,VDG=risk_data$VDG,MRI_screening = risk_data$MRI_screen,US_screening=risk_data$US_screen)
#If a cancer is detected add a cancer and details to the counters
if(screen_result[1] == 1){
screen_detected_ca <-1
cancer_diagnostic[1] <- c((age+Time_to_screen))
cancer_diagnostic[3] <- c(Ca_size)
cancer_diagnostic[4] <- c(1)
cancer_diagnostic[5] <- c(screen_result[4])
cancer_diagnostic[6] <- c(screen_result[3])
cancer_diagnostic[10] <- c(screen_count)
incidence_age_record = age+Time_to_screen
#Add cost of diagnostic follow up
costs = costs + (cost_follow_up*current_discount)
costs_follow_up = costs_follow_up + (cost_follow_up*current_discount)
}
if(screen_result[1] == 1 && screen_count == 1){sdfirst_cancer <-1} #ca detected in first screen
if(screen_result[1] == 1 && screen_count == length(screen_times)){sdlast_cancer <-1} #ca detected on last screen
} else{screen_detected_ca <- 0}
} else{screen_detected_ca <- 0}
#If a cancer is not found does a false-positive occur?
if(Event_place == 1 && screen_detected_ca == 0 && dqrunif(1,0,1)<recall_rate){
recall_count <- recall_count+1
#Add costs of false-positive recall
costs=costs+(cost_follow_up*current_discount)+(biopsy_rate*cost_biop*current_discount)
costs_follow_up=costs_follow_up+(costs_follow_up*current_discount)+(biopsy_rate*cost_biop*current_discount)}
}} #End screening event
#Clinical cancer diagnosis event
if(Event_place == 3){
interval_ca <-1
incidence_age_record = age+Time_to_CD
#Add costs of diagnosis for clinical diagnosis
costs <- costs + (cost_follow_up*current_discount)
cancer_diagnostic[1] <- c((age+Time_to_CD))
cancer_diagnostic[3] <- c(CD_size)
}
#If a cancer detected clinically or by screening
if(screen_detected_ca == 1 || interval_ca == 1){
age <- age + Next_event_time
if(interval_ca == 1){Ca_size <- CD_size}
#Assign a stage based on tumour size
stage_cat <- cmp_stage_by_size(Ca_size)
#Record the stage
if(stage_cat == 1){stage1_counter = stage1_counter+1}
if(stage_cat == 2){stage2_counter = stage2_counter+1}
if(stage_cat == 3){stage3_counter = stage3_counter+1}
if(stage_cat == 4){stage4_counter = stage4_counter+1}
if(stage_cat == 5){DCIS_counter = DCIS_counter+1
#Add the cost of DCIS
costs = costs + (cost_DCIS*current_discount)}
#Generate a cancer specific survival time, accounting for competing risks
Ca_mort_age <- cmp_ca_survival_time(stage_cat,Mort_age,age,ca_incidence_age)
#Reduce age of death if cancer causes woman to die earlier
if(Ca_mort_age<Mort_age){Mort_age<-Ca_mort_age}
#Set up variables to look up treatment costs
if(stage_cat<3){iStage<-"Early"} else {iStage<-"Late"}
if(age<65){iAge<-"18.64"} else {iAge<-"65plus"}
#If deterministic analysis then look up a treatment cost for the cancer
if(PSA==0){
if(stage_cat <5){costs<-costs+(as.numeric(fnLookupBase(iStage,iAge,min(c(round(Mort_age-age),50)))*current_discount))}
} else {
#If PSA analysis then look up treatment cost and apply cost variation
if(stage_cat <5){costs<-costs+((1+risk_data$PSA_costvar)*as.numeric(fnLookupBase(iStage,iAge,min(c(round(Mort_age-age),50)))*current_discount))}
}
#Record age of death and stage of cancer
cancer_diagnostic[9] <- c(Mort_age)
cancer_diagnostic[2] <- c(stage_cat)
}else{age <- age + Next_event_time #Update age if no cancer
}
#Update times for next event
if(screen_count+missed_screen < length(screen_times)){Time_to_screen <- screen_times[screen_count+1] - age}else{Time_to_screen <- 101} #when screen times runs out set time to age 101
Time_to_death <- Mort_age - age
Time_to_CD <- CD_age - age
} #End first while loop
if((screen_detected_ca+interval_ca) == 0){cancer_diagnostic[1] <- Mort_age} # Recorded age is age of death or cancer incidence
#Update all ca/screen counters
screen_detected_count <- screen_detected_count + screen_detected_ca
screen_counter <- screen_counter + screen_count
US_counter <- US_counter + US_count
MRI_counter <- MRI_counter + MRI_count
#Update false-positive recalls
recall_counter <- recall_counter + recall_count
#Update first screen detected ca counter
sdfirst_counter <- sdfirst_counter + sdfirst_cancer
#Update last ca/screen counters
sdlast_counter <- sdlast_counter + sdlast_cancer
lastscreen_counter <- lastscreen_counter + lastscreen_count
#Update Life-year counter
LY_counter <- LY_counter + (Mort_age-start_age)
#QALY counter
#Set up a QALY vector of length equal to life years
QALY_length <- ceiling(Mort_age)-(screen_startage-1)
#If less than 1 life year lived, set length to 1
if(QALY_length<1){QALY_length <-1}
#Ensure people don't live past end of time horizon
if(QALY_length>time_horizon-screen_startage){QALY_length <-time_horizon-screen_startage}
#Fill QALY vector with 0's
QALY_vect <- rep(0,QALY_length)
#Fill QALY vector with discounted age related utility values
for (y in 1:length(QALY_vect)){
QALY_vect[y] <- (utility_ages[match((ceiling(((screen_startage-1)+y)/5)*5),utility_ages[,1]),2])*(1/(1+discount_health)^y)
QALY_vect[QALY_length]<-QALY_vect[QALY_length]*(1-(ceiling(Mort_age)-Mort_age))
}
#If cancer occurs then fill QALY vector with discounted cancer utilities from incidence age
#NB this code accounts for partial years spent in different health states
if (incidence_age_record > 0){
QALY_vect[floor(incidence_age_record)-screen_startage] <- utility_stage_cat_y1[stage_cat]*QALY_vect[floor(incidence_age_record)-screen_startage]*(1-(incidence_age_record-floor(incidence_age_record)))}
if(incidence_age_record>0 & Mort_age-incidence_age_record>1){
QALY_vect[(floor(incidence_age_record)-screen_startage)+1]<-(utility_stage_cat_y1[stage_cat]*QALY_vect[(floor(incidence_age_record)-screen_startage)+1]*(incidence_age_record-floor(incidence_age_record)))+
(utility_stage_cat_follow[stage_cat]*QALY_vect[(floor(incidence_age_record)-screen_startage)+1]*(1-(incidence_age_record-floor(incidence_age_record))))}
if(incidence_age_record > 0 && ceiling(if(Mort_age<100){Mort_age}else{100}) > incidence_age_record+2){
for (y in (incidence_age_record+2):min((incidence_age_record+8),ceiling(if(Mort_age<100){Mort_age}else{100}))){
QALY_vect[y-screen_startage] <- QALY_vect[y-screen_startage]*utility_stage_cat_follow[stage_cat]
}
}
#Record total QALYs for J loop
QALY_counter <- QALY_counter + sum(QALY_vect,na.rm = TRUE)
} #end j loop
#If deterministic analysis then record outputs
if(PSA==0){
c(QALY_counter, costs, screen_counter,cancer_diagnostic[8],(screen_detected_ca+interval_ca),screen_detected_ca, screen_strategy,risk_data$growth_rate,LY_counter-(screen_startage-start_age),cancer_diagnostic)}else{
#If PSA then record outputs + monte carlo draws
as.numeric(c(QALY_counter, costs, screen_counter,cancer_diagnostic[8],(screen_detected_ca+interval_ca),screen_detected_ca,screen_strategy,risk_data$growth_rate,LY_counter-(screen_startage-start_age), c(risk_data[15:40])))
}
}
#Create a results data.frame
results <- data.frame(results)
names(results)[1] <- 'QALY'
names(results)[2] <- 'Cost'
names(results)[3] <- 'Screens'
names(results)[4] <- "Cancer Diagnosed Age"
names(results)[5] <- "Cancer"
names(results)[6] <- "screen detected"
names(results)[7] <-"alternative"
names(results)[8] <- "Growth rate"
names(results)[9] <- "Life Years"
#If PSA add additional columns for Monte Carlo draws
if(PSA==1){
names(results)[10:35]<-c("PSA_gamma_survival_1","PSA_gamma_survival_2","PSA_gamma_survival_3",
"PSA_meta_survival_54","PSA_meta_survival_74","PSA_meta_survival_99",
"PSA_beta_1","PSA_beta_2",'PSA_VDG1_sen','PSA_VDG2_sen',
'PSA_VDG3_sen', 'PSA_VDG4_sen',"PSA_MRI_cdr","PSA_US_cdr",
"PSA_log_norm_mean","PSA_log_norm_sd","PSA_cost_strat","PSA_costvar",
"PSA_util_1to3","PSA_util_4","PSA_costscreen","PSA_cost_follow_up",
"PSA_cost_biop","PSA_cost_US","PSA_cost_MRI","mcid")
}
#Save results from this chunk as an Rdata file
if(PSA==0){
save(results,file = paste("Deterministic results/Determ_",screen_strategy,"_",ii,".Rdata",sep = ""))}else{
save(results,file = paste("PSA results/PSA_",screen_strategy,"_",ii,".Rdata",sep = ""))
}
#Print simulation progress
print(paste(ii*10,"%"))
} #End i loop
#Create summarised results
merged_result <- matrix(0,nrow = chunks,ncol = 7)
if(PSA==0){
for (i in 1:chunks){
#Record average outputs for each chunk and save in an excel file
load(paste("Deterministic results/Determ_",screen_strategy,"_",i,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
merged_result[i,1] <- mean(results[,1])
merged_result[i,2] <- mean(results[,2])
merged_result[i,3] <- mean(results[,3])
merged_result[i,4] <- mean(results[,5])
merged_result[i,5] <- mean(results[,6])
merged_result[i,6] <- mean(results[,7])
merged_result[i,7] <- mean(results[,9])
}
write.csv(merged_result,file = paste("Detresults_strat_",screen_strategy,".csv"))}else{
for (i in 1:chunks){
#Record average outputs for each chunk and save in an excel file
load(paste("PSA results/PSA_",screen_strategy,"_",i,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
merged_result[i,1] <- mean(results[,1])
merged_result[i,2] <- mean(results[,2])
merged_result[i,3] <- mean(results[,3])
merged_result[i,4] <- mean(results[,5])
merged_result[i,5] <- mean(results[,6])
merged_result[i,6] <- mean(results[,7])
merged_result[i,7] <- mean(results[,9])
}
write.csv(merged_result,file = paste("PSAresults_strat_",screen_strategy,".csv"))
}
library("dampack")
library(gt)
library(tidyverse)
library(magrittr)
output_df <- data.frame(matrix(nrow=6,ncol=4))
screen_strategies<-c(0,1,2,3,4,9)
for (j in 1:6){
screen_strategy<-screen_strategies[j]
load(paste("Deterministic results/Determ_",screen_strategy,"_",1,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
results<-results[-c(4:8)]
results<-results[-c(5:14)]
detresults<-results
for (i in 2:10){
#name of saved files needed
load(paste("Deterministic results/Determ_",screen_strategy,"_",i,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
results<-results[-c(4:8)]
results<-results[-c(5:14)]
detresults<-rbind(detresults,results)
}
output_df[j,]<-c(mean(detresults[,1]),mean(detresults[,2]),mean(detresults[,3]),mean(detresults[,4]))
}
strategies<-c("No Screening","Risk-1","Risk-2","3 Yearly","2 Yearly","Risk-3")
rownames(output_df) <- strategies
colnames(output_df)<-c("qaly","cost","screens","life years")
output_df[,"incQALYS"]<-c(output_df$qaly-output_df$qaly[1])
output_df[,"incCost"]<-c(output_df$cost-output_df$cost[1])
output_df[,"ICER"]<-c(output_df$incCost/output_df$incQALYS)
output_df[,"NB20k"]<-c((output_df$incQALYS*20000)-output_df$incCost)
output_df[,"NB30k"]<-c((output_df$incQALYS*30000)-output_df$incCost)
icer_strat<-calculate_icers(cost=output_df$cost,
effect=output_df$qaly,
strategies = c(row.names(output_df)))
plot(icer_strat,currency="£", label="all")
